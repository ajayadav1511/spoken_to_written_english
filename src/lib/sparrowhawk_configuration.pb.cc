// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sparrowhawk_configuration.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sparrowhawk_configuration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace speech {
namespace sparrowhawk {

namespace {

const ::google::protobuf::Descriptor* SparrowhawkConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparrowhawkConfiguration_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sparrowhawk_5fconfiguration_2eproto() {
  protobuf_AddDesc_sparrowhawk_5fconfiguration_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sparrowhawk_configuration.proto");
  GOOGLE_CHECK(file != NULL);
  SparrowhawkConfiguration_descriptor_ = file->message_type(0);
  static const int SparrowhawkConfiguration_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparrowhawkConfiguration, tokenizer_grammar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparrowhawkConfiguration, verbalizer_grammar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparrowhawkConfiguration, sentence_boundary_regexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparrowhawkConfiguration, sentence_boundary_exceptions_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparrowhawkConfiguration, serialization_spec_),
  };
  SparrowhawkConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparrowhawkConfiguration_descriptor_,
      SparrowhawkConfiguration::default_instance_,
      SparrowhawkConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparrowhawkConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparrowhawkConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparrowhawkConfiguration));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sparrowhawk_5fconfiguration_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparrowhawkConfiguration_descriptor_, &SparrowhawkConfiguration::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sparrowhawk_5fconfiguration_2eproto() {
  delete SparrowhawkConfiguration::default_instance_;
  delete SparrowhawkConfiguration_reflection_;
}

void protobuf_AddDesc_sparrowhawk_5fconfiguration_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037sparrowhawk_configuration.proto\022\022speec"
    "h.sparrowhawk\"\272\001\n\030SparrowhawkConfigurati"
    "on\022\031\n\021tokenizer_grammar\030\001 \001(\t\022\032\n\022verbali"
    "zer_grammar\030\002 \001(\t\022 \n\030sentence_boundary_r"
    "egexp\030\003 \001(\t\022)\n!sentence_boundary_excepti"
    "ons_file\030\004 \001(\t\022\032\n\022serialization_spec\030\005 \001"
    "(\t", 242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sparrowhawk_configuration.proto", &protobuf_RegisterTypes);
  SparrowhawkConfiguration::default_instance_ = new SparrowhawkConfiguration();
  SparrowhawkConfiguration::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sparrowhawk_5fconfiguration_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sparrowhawk_5fconfiguration_2eproto {
  StaticDescriptorInitializer_sparrowhawk_5fconfiguration_2eproto() {
    protobuf_AddDesc_sparrowhawk_5fconfiguration_2eproto();
  }
} static_descriptor_initializer_sparrowhawk_5fconfiguration_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SparrowhawkConfiguration::kTokenizerGrammarFieldNumber;
const int SparrowhawkConfiguration::kVerbalizerGrammarFieldNumber;
const int SparrowhawkConfiguration::kSentenceBoundaryRegexpFieldNumber;
const int SparrowhawkConfiguration::kSentenceBoundaryExceptionsFileFieldNumber;
const int SparrowhawkConfiguration::kSerializationSpecFieldNumber;
#endif  // !_MSC_VER

SparrowhawkConfiguration::SparrowhawkConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SparrowhawkConfiguration::InitAsDefaultInstance() {
}

SparrowhawkConfiguration::SparrowhawkConfiguration(const SparrowhawkConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SparrowhawkConfiguration::SharedCtor() {
  _cached_size_ = 0;
  tokenizer_grammar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verbalizer_grammar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sentence_boundary_regexp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sentence_boundary_exceptions_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialization_spec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparrowhawkConfiguration::~SparrowhawkConfiguration() {
  SharedDtor();
}

void SparrowhawkConfiguration::SharedDtor() {
  if (tokenizer_grammar_ != &::google::protobuf::internal::kEmptyString) {
    delete tokenizer_grammar_;
  }
  if (verbalizer_grammar_ != &::google::protobuf::internal::kEmptyString) {
    delete verbalizer_grammar_;
  }
  if (sentence_boundary_regexp_ != &::google::protobuf::internal::kEmptyString) {
    delete sentence_boundary_regexp_;
  }
  if (sentence_boundary_exceptions_file_ != &::google::protobuf::internal::kEmptyString) {
    delete sentence_boundary_exceptions_file_;
  }
  if (serialization_spec_ != &::google::protobuf::internal::kEmptyString) {
    delete serialization_spec_;
  }
  if (this != default_instance_) {
  }
}

void SparrowhawkConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparrowhawkConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparrowhawkConfiguration_descriptor_;
}

const SparrowhawkConfiguration& SparrowhawkConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sparrowhawk_5fconfiguration_2eproto();
  return *default_instance_;
}

SparrowhawkConfiguration* SparrowhawkConfiguration::default_instance_ = NULL;

SparrowhawkConfiguration* SparrowhawkConfiguration::New() const {
  return new SparrowhawkConfiguration;
}

void SparrowhawkConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tokenizer_grammar()) {
      if (tokenizer_grammar_ != &::google::protobuf::internal::kEmptyString) {
        tokenizer_grammar_->clear();
      }
    }
    if (has_verbalizer_grammar()) {
      if (verbalizer_grammar_ != &::google::protobuf::internal::kEmptyString) {
        verbalizer_grammar_->clear();
      }
    }
    if (has_sentence_boundary_regexp()) {
      if (sentence_boundary_regexp_ != &::google::protobuf::internal::kEmptyString) {
        sentence_boundary_regexp_->clear();
      }
    }
    if (has_sentence_boundary_exceptions_file()) {
      if (sentence_boundary_exceptions_file_ != &::google::protobuf::internal::kEmptyString) {
        sentence_boundary_exceptions_file_->clear();
      }
    }
    if (has_serialization_spec()) {
      if (serialization_spec_ != &::google::protobuf::internal::kEmptyString) {
        serialization_spec_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparrowhawkConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tokenizer_grammar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tokenizer_grammar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tokenizer_grammar().data(), this->tokenizer_grammar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_verbalizer_grammar;
        break;
      }

      // optional string verbalizer_grammar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verbalizer_grammar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbalizer_grammar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verbalizer_grammar().data(), this->verbalizer_grammar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sentence_boundary_regexp;
        break;
      }

      // optional string sentence_boundary_regexp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sentence_boundary_regexp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sentence_boundary_regexp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sentence_boundary_regexp().data(), this->sentence_boundary_regexp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sentence_boundary_exceptions_file;
        break;
      }

      // optional string sentence_boundary_exceptions_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sentence_boundary_exceptions_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sentence_boundary_exceptions_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sentence_boundary_exceptions_file().data(), this->sentence_boundary_exceptions_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serialization_spec;
        break;
      }

      // optional string serialization_spec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialization_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialization_spec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serialization_spec().data(), this->serialization_spec().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SparrowhawkConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tokenizer_grammar = 1;
  if (has_tokenizer_grammar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tokenizer_grammar().data(), this->tokenizer_grammar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tokenizer_grammar(), output);
  }

  // optional string verbalizer_grammar = 2;
  if (has_verbalizer_grammar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbalizer_grammar().data(), this->verbalizer_grammar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->verbalizer_grammar(), output);
  }

  // optional string sentence_boundary_regexp = 3;
  if (has_sentence_boundary_regexp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sentence_boundary_regexp().data(), this->sentence_boundary_regexp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sentence_boundary_regexp(), output);
  }

  // optional string sentence_boundary_exceptions_file = 4;
  if (has_sentence_boundary_exceptions_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sentence_boundary_exceptions_file().data(), this->sentence_boundary_exceptions_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sentence_boundary_exceptions_file(), output);
  }

  // optional string serialization_spec = 5;
  if (has_serialization_spec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialization_spec().data(), this->serialization_spec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->serialization_spec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SparrowhawkConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tokenizer_grammar = 1;
  if (has_tokenizer_grammar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tokenizer_grammar().data(), this->tokenizer_grammar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tokenizer_grammar(), target);
  }

  // optional string verbalizer_grammar = 2;
  if (has_verbalizer_grammar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbalizer_grammar().data(), this->verbalizer_grammar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->verbalizer_grammar(), target);
  }

  // optional string sentence_boundary_regexp = 3;
  if (has_sentence_boundary_regexp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sentence_boundary_regexp().data(), this->sentence_boundary_regexp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sentence_boundary_regexp(), target);
  }

  // optional string sentence_boundary_exceptions_file = 4;
  if (has_sentence_boundary_exceptions_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sentence_boundary_exceptions_file().data(), this->sentence_boundary_exceptions_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sentence_boundary_exceptions_file(), target);
  }

  // optional string serialization_spec = 5;
  if (has_serialization_spec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialization_spec().data(), this->serialization_spec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serialization_spec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SparrowhawkConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tokenizer_grammar = 1;
    if (has_tokenizer_grammar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tokenizer_grammar());
    }

    // optional string verbalizer_grammar = 2;
    if (has_verbalizer_grammar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbalizer_grammar());
    }

    // optional string sentence_boundary_regexp = 3;
    if (has_sentence_boundary_regexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sentence_boundary_regexp());
    }

    // optional string sentence_boundary_exceptions_file = 4;
    if (has_sentence_boundary_exceptions_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sentence_boundary_exceptions_file());
    }

    // optional string serialization_spec = 5;
    if (has_serialization_spec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialization_spec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparrowhawkConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparrowhawkConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparrowhawkConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparrowhawkConfiguration::MergeFrom(const SparrowhawkConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tokenizer_grammar()) {
      set_tokenizer_grammar(from.tokenizer_grammar());
    }
    if (from.has_verbalizer_grammar()) {
      set_verbalizer_grammar(from.verbalizer_grammar());
    }
    if (from.has_sentence_boundary_regexp()) {
      set_sentence_boundary_regexp(from.sentence_boundary_regexp());
    }
    if (from.has_sentence_boundary_exceptions_file()) {
      set_sentence_boundary_exceptions_file(from.sentence_boundary_exceptions_file());
    }
    if (from.has_serialization_spec()) {
      set_serialization_spec(from.serialization_spec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparrowhawkConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparrowhawkConfiguration::CopyFrom(const SparrowhawkConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparrowhawkConfiguration::IsInitialized() const {

  return true;
}

void SparrowhawkConfiguration::Swap(SparrowhawkConfiguration* other) {
  if (other != this) {
    std::swap(tokenizer_grammar_, other->tokenizer_grammar_);
    std::swap(verbalizer_grammar_, other->verbalizer_grammar_);
    std::swap(sentence_boundary_regexp_, other->sentence_boundary_regexp_);
    std::swap(sentence_boundary_exceptions_file_, other->sentence_boundary_exceptions_file_);
    std::swap(serialization_spec_, other->serialization_spec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparrowhawkConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparrowhawkConfiguration_descriptor_;
  metadata.reflection = SparrowhawkConfiguration_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sparrowhawk
}  // namespace speech

// @@protoc_insertion_point(global_scope)
