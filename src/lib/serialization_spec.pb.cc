// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization_spec.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serialization_spec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace speech {
namespace sparrowhawk {

namespace {

const ::google::protobuf::Descriptor* RecordSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* StyleSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StyleSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerializeSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializeSpec_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_serialization_5fspec_2eproto() {
  protobuf_AddDesc_serialization_5fspec_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "serialization_spec.proto");
  GOOGLE_CHECK(file != NULL);
  RecordSpec_descriptor_ = file->message_type(0);
  static const int RecordSpec_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordSpec, prefix_spec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordSpec, suffix_spec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordSpec, field_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordSpec, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordSpec, default_value_),
  };
  RecordSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordSpec_descriptor_,
      RecordSpec::default_instance_,
      RecordSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordSpec));
  StyleSpec_descriptor_ = file->message_type(1);
  static const int StyleSpec_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleSpec, record_spec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleSpec, required_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleSpec, prohibited_fields_),
  };
  StyleSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StyleSpec_descriptor_,
      StyleSpec::default_instance_,
      StyleSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StyleSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StyleSpec));
  ClassSpec_descriptor_ = file->message_type(2);
  static const int ClassSpec_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassSpec, semiotic_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassSpec, style_spec_),
  };
  ClassSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClassSpec_descriptor_,
      ClassSpec::default_instance_,
      ClassSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClassSpec));
  SerializeSpec_descriptor_ = file->message_type(3);
  static const int SerializeSpec_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializeSpec, class_spec_),
  };
  SerializeSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SerializeSpec_descriptor_,
      SerializeSpec::default_instance_,
      SerializeSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializeSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializeSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SerializeSpec));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_serialization_5fspec_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordSpec_descriptor_, &RecordSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StyleSpec_descriptor_, &StyleSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClassSpec_descriptor_, &ClassSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SerializeSpec_descriptor_, &SerializeSpec::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_serialization_5fspec_2eproto() {
  delete RecordSpec::default_instance_;
  delete RecordSpec_reflection_;
  delete StyleSpec::default_instance_;
  delete StyleSpec_reflection_;
  delete ClassSpec::default_instance_;
  delete ClassSpec_reflection_;
  delete SerializeSpec::default_instance_;
  delete SerializeSpec_reflection_;
}

void protobuf_AddDesc_serialization_5fspec_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030serialization_spec.proto\022\022speech.sparr"
    "owhawk\"\260\001\n\nRecordSpec\0223\n\013prefix_spec\030\001 \003"
    "(\0132\036.speech.sparrowhawk.RecordSpec\0223\n\013su"
    "ffix_spec\030\002 \003(\0132\036.speech.sparrowhawk.Rec"
    "ordSpec\022\022\n\nfield_path\030\003 \001(\t\022\r\n\005label\030\004 \001"
    "(\t\022\025\n\rdefault_value\030\005 \001(\t\"t\n\tStyleSpec\0223"
    "\n\013record_spec\030\001 \003(\0132\036.speech.sparrowhawk"
    ".RecordSpec\022\027\n\017required_fields\030\002 \003(\t\022\031\n\021"
    "prohibited_fields\030\003 \003(\t\"V\n\tClassSpec\022\026\n\016"
    "semiotic_class\030\001 \001(\t\0221\n\nstyle_spec\030\002 \003(\013"
    "2\035.speech.sparrowhawk.StyleSpec\"B\n\rSeria"
    "lizeSpec\0221\n\nclass_spec\030\001 \003(\0132\035.speech.sp"
    "arrowhawk.ClassSpec", 499);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "serialization_spec.proto", &protobuf_RegisterTypes);
  RecordSpec::default_instance_ = new RecordSpec();
  StyleSpec::default_instance_ = new StyleSpec();
  ClassSpec::default_instance_ = new ClassSpec();
  SerializeSpec::default_instance_ = new SerializeSpec();
  RecordSpec::default_instance_->InitAsDefaultInstance();
  StyleSpec::default_instance_->InitAsDefaultInstance();
  ClassSpec::default_instance_->InitAsDefaultInstance();
  SerializeSpec::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serialization_5fspec_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serialization_5fspec_2eproto {
  StaticDescriptorInitializer_serialization_5fspec_2eproto() {
    protobuf_AddDesc_serialization_5fspec_2eproto();
  }
} static_descriptor_initializer_serialization_5fspec_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RecordSpec::kPrefixSpecFieldNumber;
const int RecordSpec::kSuffixSpecFieldNumber;
const int RecordSpec::kFieldPathFieldNumber;
const int RecordSpec::kLabelFieldNumber;
const int RecordSpec::kDefaultValueFieldNumber;
#endif  // !_MSC_VER

RecordSpec::RecordSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordSpec::InitAsDefaultInstance() {
}

RecordSpec::RecordSpec(const RecordSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordSpec::SharedCtor() {
  _cached_size_ = 0;
  field_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  default_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordSpec::~RecordSpec() {
  SharedDtor();
}

void RecordSpec::SharedDtor() {
  if (field_path_ != &::google::protobuf::internal::kEmptyString) {
    delete field_path_;
  }
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (default_value_ != &::google::protobuf::internal::kEmptyString) {
    delete default_value_;
  }
  if (this != default_instance_) {
  }
}

void RecordSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordSpec_descriptor_;
}

const RecordSpec& RecordSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_5fspec_2eproto();
  return *default_instance_;
}

RecordSpec* RecordSpec::default_instance_ = NULL;

RecordSpec* RecordSpec::New() const {
  return new RecordSpec;
}

void RecordSpec::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_field_path()) {
      if (field_path_ != &::google::protobuf::internal::kEmptyString) {
        field_path_->clear();
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    if (has_default_value()) {
      if (default_value_ != &::google::protobuf::internal::kEmptyString) {
        default_value_->clear();
      }
    }
  }
  prefix_spec_.Clear();
  suffix_spec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .speech.sparrowhawk.RecordSpec prefix_spec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefix_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prefix_spec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_prefix_spec;
        if (input->ExpectTag(18)) goto parse_suffix_spec;
        break;
      }

      // repeated .speech.sparrowhawk.RecordSpec suffix_spec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suffix_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suffix_spec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_suffix_spec;
        if (input->ExpectTag(26)) goto parse_field_path;
        break;
      }

      // optional string field_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_path().data(), this->field_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_label;
        break;
      }

      // optional string label = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_default_value;
        break;
      }

      // optional string default_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->default_value().data(), this->default_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .speech.sparrowhawk.RecordSpec prefix_spec = 1;
  for (int i = 0; i < this->prefix_spec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prefix_spec(i), output);
  }

  // repeated .speech.sparrowhawk.RecordSpec suffix_spec = 2;
  for (int i = 0; i < this->suffix_spec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->suffix_spec(i), output);
  }

  // optional string field_path = 3;
  if (has_field_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_path().data(), this->field_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->field_path(), output);
  }

  // optional string label = 4;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->label(), output);
  }

  // optional string default_value = 5;
  if (has_default_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->default_value().data(), this->default_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->default_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .speech.sparrowhawk.RecordSpec prefix_spec = 1;
  for (int i = 0; i < this->prefix_spec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prefix_spec(i), target);
  }

  // repeated .speech.sparrowhawk.RecordSpec suffix_spec = 2;
  for (int i = 0; i < this->suffix_spec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->suffix_spec(i), target);
  }

  // optional string field_path = 3;
  if (has_field_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_path().data(), this->field_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->field_path(), target);
  }

  // optional string label = 4;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->label(), target);
  }

  // optional string default_value = 5;
  if (has_default_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->default_value().data(), this->default_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->default_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordSpec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string field_path = 3;
    if (has_field_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field_path());
    }

    // optional string label = 4;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string default_value = 5;
    if (has_default_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_value());
    }

  }
  // repeated .speech.sparrowhawk.RecordSpec prefix_spec = 1;
  total_size += 1 * this->prefix_spec_size();
  for (int i = 0; i < this->prefix_spec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prefix_spec(i));
  }

  // repeated .speech.sparrowhawk.RecordSpec suffix_spec = 2;
  total_size += 1 * this->suffix_spec_size();
  for (int i = 0; i < this->suffix_spec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suffix_spec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordSpec::MergeFrom(const RecordSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  prefix_spec_.MergeFrom(from.prefix_spec_);
  suffix_spec_.MergeFrom(from.suffix_spec_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_field_path()) {
      set_field_path(from.field_path());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_default_value()) {
      set_default_value(from.default_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordSpec::CopyFrom(const RecordSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordSpec::IsInitialized() const {

  return true;
}

void RecordSpec::Swap(RecordSpec* other) {
  if (other != this) {
    prefix_spec_.Swap(&other->prefix_spec_);
    suffix_spec_.Swap(&other->suffix_spec_);
    std::swap(field_path_, other->field_path_);
    std::swap(label_, other->label_);
    std::swap(default_value_, other->default_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordSpec_descriptor_;
  metadata.reflection = RecordSpec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StyleSpec::kRecordSpecFieldNumber;
const int StyleSpec::kRequiredFieldsFieldNumber;
const int StyleSpec::kProhibitedFieldsFieldNumber;
#endif  // !_MSC_VER

StyleSpec::StyleSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StyleSpec::InitAsDefaultInstance() {
}

StyleSpec::StyleSpec(const StyleSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StyleSpec::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StyleSpec::~StyleSpec() {
  SharedDtor();
}

void StyleSpec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StyleSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StyleSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StyleSpec_descriptor_;
}

const StyleSpec& StyleSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_5fspec_2eproto();
  return *default_instance_;
}

StyleSpec* StyleSpec::default_instance_ = NULL;

StyleSpec* StyleSpec::New() const {
  return new StyleSpec;
}

void StyleSpec::Clear() {
  record_spec_.Clear();
  required_fields_.Clear();
  prohibited_fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StyleSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .speech.sparrowhawk.RecordSpec record_spec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_spec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record_spec;
        if (input->ExpectTag(18)) goto parse_required_fields;
        break;
      }

      // repeated string required_fields = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_required_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_required_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->required_fields(this->required_fields_size() - 1).data(),
            this->required_fields(this->required_fields_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_required_fields;
        if (input->ExpectTag(26)) goto parse_prohibited_fields;
        break;
      }

      // repeated string prohibited_fields = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prohibited_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_prohibited_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prohibited_fields(this->prohibited_fields_size() - 1).data(),
            this->prohibited_fields(this->prohibited_fields_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prohibited_fields;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StyleSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .speech.sparrowhawk.RecordSpec record_spec = 1;
  for (int i = 0; i < this->record_spec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record_spec(i), output);
  }

  // repeated string required_fields = 2;
  for (int i = 0; i < this->required_fields_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->required_fields(i).data(), this->required_fields(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->required_fields(i), output);
  }

  // repeated string prohibited_fields = 3;
  for (int i = 0; i < this->prohibited_fields_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->prohibited_fields(i).data(), this->prohibited_fields(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->prohibited_fields(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StyleSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .speech.sparrowhawk.RecordSpec record_spec = 1;
  for (int i = 0; i < this->record_spec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record_spec(i), target);
  }

  // repeated string required_fields = 2;
  for (int i = 0; i < this->required_fields_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->required_fields(i).data(), this->required_fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->required_fields(i), target);
  }

  // repeated string prohibited_fields = 3;
  for (int i = 0; i < this->prohibited_fields_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prohibited_fields(i).data(), this->prohibited_fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->prohibited_fields(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StyleSpec::ByteSize() const {
  int total_size = 0;

  // repeated .speech.sparrowhawk.RecordSpec record_spec = 1;
  total_size += 1 * this->record_spec_size();
  for (int i = 0; i < this->record_spec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_spec(i));
  }

  // repeated string required_fields = 2;
  total_size += 1 * this->required_fields_size();
  for (int i = 0; i < this->required_fields_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->required_fields(i));
  }

  // repeated string prohibited_fields = 3;
  total_size += 1 * this->prohibited_fields_size();
  for (int i = 0; i < this->prohibited_fields_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->prohibited_fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StyleSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StyleSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StyleSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StyleSpec::MergeFrom(const StyleSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_spec_.MergeFrom(from.record_spec_);
  required_fields_.MergeFrom(from.required_fields_);
  prohibited_fields_.MergeFrom(from.prohibited_fields_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StyleSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleSpec::CopyFrom(const StyleSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleSpec::IsInitialized() const {

  return true;
}

void StyleSpec::Swap(StyleSpec* other) {
  if (other != this) {
    record_spec_.Swap(&other->record_spec_);
    required_fields_.Swap(&other->required_fields_);
    prohibited_fields_.Swap(&other->prohibited_fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StyleSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StyleSpec_descriptor_;
  metadata.reflection = StyleSpec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClassSpec::kSemioticClassFieldNumber;
const int ClassSpec::kStyleSpecFieldNumber;
#endif  // !_MSC_VER

ClassSpec::ClassSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClassSpec::InitAsDefaultInstance() {
}

ClassSpec::ClassSpec(const ClassSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClassSpec::SharedCtor() {
  _cached_size_ = 0;
  semiotic_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassSpec::~ClassSpec() {
  SharedDtor();
}

void ClassSpec::SharedDtor() {
  if (semiotic_class_ != &::google::protobuf::internal::kEmptyString) {
    delete semiotic_class_;
  }
  if (this != default_instance_) {
  }
}

void ClassSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassSpec_descriptor_;
}

const ClassSpec& ClassSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_5fspec_2eproto();
  return *default_instance_;
}

ClassSpec* ClassSpec::default_instance_ = NULL;

ClassSpec* ClassSpec::New() const {
  return new ClassSpec;
}

void ClassSpec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_semiotic_class()) {
      if (semiotic_class_ != &::google::protobuf::internal::kEmptyString) {
        semiotic_class_->clear();
      }
    }
  }
  style_spec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClassSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string semiotic_class = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_semiotic_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->semiotic_class().data(), this->semiotic_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_style_spec;
        break;
      }

      // repeated .speech.sparrowhawk.StyleSpec style_spec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_style_spec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_style_spec;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClassSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string semiotic_class = 1;
  if (has_semiotic_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->semiotic_class().data(), this->semiotic_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->semiotic_class(), output);
  }

  // repeated .speech.sparrowhawk.StyleSpec style_spec = 2;
  for (int i = 0; i < this->style_spec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->style_spec(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClassSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string semiotic_class = 1;
  if (has_semiotic_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->semiotic_class().data(), this->semiotic_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->semiotic_class(), target);
  }

  // repeated .speech.sparrowhawk.StyleSpec style_spec = 2;
  for (int i = 0; i < this->style_spec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->style_spec(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClassSpec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string semiotic_class = 1;
    if (has_semiotic_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->semiotic_class());
    }

  }
  // repeated .speech.sparrowhawk.StyleSpec style_spec = 2;
  total_size += 1 * this->style_spec_size();
  for (int i = 0; i < this->style_spec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->style_spec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClassSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClassSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClassSpec::MergeFrom(const ClassSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  style_spec_.MergeFrom(from.style_spec_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_semiotic_class()) {
      set_semiotic_class(from.semiotic_class());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClassSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassSpec::CopyFrom(const ClassSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassSpec::IsInitialized() const {

  return true;
}

void ClassSpec::Swap(ClassSpec* other) {
  if (other != this) {
    std::swap(semiotic_class_, other->semiotic_class_);
    style_spec_.Swap(&other->style_spec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClassSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassSpec_descriptor_;
  metadata.reflection = ClassSpec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SerializeSpec::kClassSpecFieldNumber;
#endif  // !_MSC_VER

SerializeSpec::SerializeSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SerializeSpec::InitAsDefaultInstance() {
}

SerializeSpec::SerializeSpec(const SerializeSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SerializeSpec::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SerializeSpec::~SerializeSpec() {
  SharedDtor();
}

void SerializeSpec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerializeSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializeSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializeSpec_descriptor_;
}

const SerializeSpec& SerializeSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_serialization_5fspec_2eproto();
  return *default_instance_;
}

SerializeSpec* SerializeSpec::default_instance_ = NULL;

SerializeSpec* SerializeSpec::New() const {
  return new SerializeSpec;
}

void SerializeSpec::Clear() {
  class_spec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SerializeSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .speech.sparrowhawk.ClassSpec class_spec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_class_spec()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_class_spec;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SerializeSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .speech.sparrowhawk.ClassSpec class_spec = 1;
  for (int i = 0; i < this->class_spec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->class_spec(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SerializeSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .speech.sparrowhawk.ClassSpec class_spec = 1;
  for (int i = 0; i < this->class_spec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->class_spec(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SerializeSpec::ByteSize() const {
  int total_size = 0;

  // repeated .speech.sparrowhawk.ClassSpec class_spec = 1;
  total_size += 1 * this->class_spec_size();
  for (int i = 0; i < this->class_spec_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->class_spec(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializeSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SerializeSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SerializeSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SerializeSpec::MergeFrom(const SerializeSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  class_spec_.MergeFrom(from.class_spec_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SerializeSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializeSpec::CopyFrom(const SerializeSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializeSpec::IsInitialized() const {

  return true;
}

void SerializeSpec::Swap(SerializeSpec* other) {
  if (other != this) {
    class_spec_.Swap(&other->class_spec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SerializeSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializeSpec_descriptor_;
  metadata.reflection = SerializeSpec_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sparrowhawk
}  // namespace speech

// @@protoc_insertion_point(global_scope)
