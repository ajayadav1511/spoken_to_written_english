// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rule_order.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rule_order.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace speech {
namespace sparrowhawk {

namespace {

const ::google::protobuf::Descriptor* Rule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Grammar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Grammar_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rule_5forder_2eproto() {
  protobuf_AddDesc_rule_5forder_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rule_order.proto");
  GOOGLE_CHECK(file != NULL);
  Rule_descriptor_ = file->message_type(0);
  static const int Rule_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, main_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, parens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, assignments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, redup_),
  };
  Rule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rule_descriptor_,
      Rule::default_instance_,
      Rule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rule));
  Grammar_descriptor_ = file->message_type(1);
  static const int Grammar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grammar, grammar_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grammar, grammar_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grammar, rules_),
  };
  Grammar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Grammar_descriptor_,
      Grammar::default_instance_,
      Grammar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grammar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grammar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Grammar));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rule_5forder_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rule_descriptor_, &Rule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Grammar_descriptor_, &Grammar::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rule_5forder_2eproto() {
  delete Rule::default_instance_;
  delete Rule_reflection_;
  delete Grammar::default_instance_;
  delete Grammar_reflection_;
}

void protobuf_AddDesc_rule_5forder_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020rule_order.proto\022\022speech.sparrowhawk\"H"
    "\n\004Rule\022\014\n\004main\030\001 \002(\t\022\016\n\006parens\030\002 \001(\t\022\023\n\013"
    "assignments\030\003 \001(\t\022\r\n\005redup\030\004 \001(\t\"^\n\007Gram"
    "mar\022\024\n\014grammar_file\030\001 \002(\t\022\024\n\014grammar_nam"
    "e\030\002 \002(\t\022\'\n\005rules\030\003 \003(\0132\030.speech.sparrowh"
    "awk.Rule", 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rule_order.proto", &protobuf_RegisterTypes);
  Rule::default_instance_ = new Rule();
  Grammar::default_instance_ = new Grammar();
  Rule::default_instance_->InitAsDefaultInstance();
  Grammar::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rule_5forder_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rule_5forder_2eproto {
  StaticDescriptorInitializer_rule_5forder_2eproto() {
    protobuf_AddDesc_rule_5forder_2eproto();
  }
} static_descriptor_initializer_rule_5forder_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Rule::kMainFieldNumber;
const int Rule::kParensFieldNumber;
const int Rule::kAssignmentsFieldNumber;
const int Rule::kRedupFieldNumber;
#endif  // !_MSC_VER

Rule::Rule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rule::InitAsDefaultInstance() {
}

Rule::Rule(const Rule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rule::SharedCtor() {
  _cached_size_ = 0;
  main_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parens_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assignments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  redup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rule::~Rule() {
  SharedDtor();
}

void Rule::SharedDtor() {
  if (main_ != &::google::protobuf::internal::kEmptyString) {
    delete main_;
  }
  if (parens_ != &::google::protobuf::internal::kEmptyString) {
    delete parens_;
  }
  if (assignments_ != &::google::protobuf::internal::kEmptyString) {
    delete assignments_;
  }
  if (redup_ != &::google::protobuf::internal::kEmptyString) {
    delete redup_;
  }
  if (this != default_instance_) {
  }
}

void Rule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rule_descriptor_;
}

const Rule& Rule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rule_5forder_2eproto();
  return *default_instance_;
}

Rule* Rule::default_instance_ = NULL;

Rule* Rule::New() const {
  return new Rule;
}

void Rule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_main()) {
      if (main_ != &::google::protobuf::internal::kEmptyString) {
        main_->clear();
      }
    }
    if (has_parens()) {
      if (parens_ != &::google::protobuf::internal::kEmptyString) {
        parens_->clear();
      }
    }
    if (has_assignments()) {
      if (assignments_ != &::google::protobuf::internal::kEmptyString) {
        assignments_->clear();
      }
    }
    if (has_redup()) {
      if (redup_ != &::google::protobuf::internal::kEmptyString) {
        redup_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string main = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_main()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->main().data(), this->main().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parens;
        break;
      }

      // optional string parens = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parens()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parens().data(), this->parens().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_assignments;
        break;
      }

      // optional string assignments = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assignments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assignments()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->assignments().data(), this->assignments().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_redup;
        break;
      }

      // optional string redup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_redup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->redup().data(), this->redup().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string main = 1;
  if (has_main()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->main().data(), this->main().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->main(), output);
  }

  // optional string parens = 2;
  if (has_parens()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parens().data(), this->parens().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->parens(), output);
  }

  // optional string assignments = 3;
  if (has_assignments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignments().data(), this->assignments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->assignments(), output);
  }

  // optional string redup = 4;
  if (has_redup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redup().data(), this->redup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->redup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string main = 1;
  if (has_main()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->main().data(), this->main().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->main(), target);
  }

  // optional string parens = 2;
  if (has_parens()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parens().data(), this->parens().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parens(), target);
  }

  // optional string assignments = 3;
  if (has_assignments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->assignments().data(), this->assignments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->assignments(), target);
  }

  // optional string redup = 4;
  if (has_redup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->redup().data(), this->redup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->redup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string main = 1;
    if (has_main()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->main());
    }

    // optional string parens = 2;
    if (has_parens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parens());
    }

    // optional string assignments = 3;
    if (has_assignments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assignments());
    }

    // optional string redup = 4;
    if (has_redup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rule::MergeFrom(const Rule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_main()) {
      set_main(from.main());
    }
    if (from.has_parens()) {
      set_parens(from.parens());
    }
    if (from.has_assignments()) {
      set_assignments(from.assignments());
    }
    if (from.has_redup()) {
      set_redup(from.redup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rule::CopyFrom(const Rule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Rule::Swap(Rule* other) {
  if (other != this) {
    std::swap(main_, other->main_);
    std::swap(parens_, other->parens_);
    std::swap(assignments_, other->assignments_);
    std::swap(redup_, other->redup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rule_descriptor_;
  metadata.reflection = Rule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Grammar::kGrammarFileFieldNumber;
const int Grammar::kGrammarNameFieldNumber;
const int Grammar::kRulesFieldNumber;
#endif  // !_MSC_VER

Grammar::Grammar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Grammar::InitAsDefaultInstance() {
}

Grammar::Grammar(const Grammar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Grammar::SharedCtor() {
  _cached_size_ = 0;
  grammar_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grammar_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Grammar::~Grammar() {
  SharedDtor();
}

void Grammar::SharedDtor() {
  if (grammar_file_ != &::google::protobuf::internal::kEmptyString) {
    delete grammar_file_;
  }
  if (grammar_name_ != &::google::protobuf::internal::kEmptyString) {
    delete grammar_name_;
  }
  if (this != default_instance_) {
  }
}

void Grammar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grammar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Grammar_descriptor_;
}

const Grammar& Grammar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rule_5forder_2eproto();
  return *default_instance_;
}

Grammar* Grammar::default_instance_ = NULL;

Grammar* Grammar::New() const {
  return new Grammar;
}

void Grammar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_grammar_file()) {
      if (grammar_file_ != &::google::protobuf::internal::kEmptyString) {
        grammar_file_->clear();
      }
    }
    if (has_grammar_name()) {
      if (grammar_name_ != &::google::protobuf::internal::kEmptyString) {
        grammar_name_->clear();
      }
    }
  }
  rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Grammar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string grammar_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grammar_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->grammar_file().data(), this->grammar_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_grammar_name;
        break;
      }

      // required string grammar_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grammar_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grammar_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->grammar_name().data(), this->grammar_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rules;
        break;
      }

      // repeated .speech.sparrowhawk.Rule rules = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rules;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Grammar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string grammar_file = 1;
  if (has_grammar_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grammar_file().data(), this->grammar_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->grammar_file(), output);
  }

  // required string grammar_name = 2;
  if (has_grammar_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grammar_name().data(), this->grammar_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->grammar_name(), output);
  }

  // repeated .speech.sparrowhawk.Rule rules = 3;
  for (int i = 0; i < this->rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rules(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Grammar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string grammar_file = 1;
  if (has_grammar_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grammar_file().data(), this->grammar_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->grammar_file(), target);
  }

  // required string grammar_name = 2;
  if (has_grammar_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grammar_name().data(), this->grammar_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->grammar_name(), target);
  }

  // repeated .speech.sparrowhawk.Rule rules = 3;
  for (int i = 0; i < this->rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rules(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Grammar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string grammar_file = 1;
    if (has_grammar_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grammar_file());
    }

    // required string grammar_name = 2;
    if (has_grammar_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grammar_name());
    }

  }
  // repeated .speech.sparrowhawk.Rule rules = 3;
  total_size += 1 * this->rules_size();
  for (int i = 0; i < this->rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rules(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grammar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Grammar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Grammar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Grammar::MergeFrom(const Grammar& from) {
  GOOGLE_CHECK_NE(&from, this);
  rules_.MergeFrom(from.rules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grammar_file()) {
      set_grammar_file(from.grammar_file());
    }
    if (from.has_grammar_name()) {
      set_grammar_name(from.grammar_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Grammar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grammar::CopyFrom(const Grammar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grammar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < rules_size(); i++) {
    if (!this->rules(i).IsInitialized()) return false;
  }
  return true;
}

void Grammar::Swap(Grammar* other) {
  if (other != this) {
    std::swap(grammar_file_, other->grammar_file_);
    std::swap(grammar_name_, other->grammar_name_);
    rules_.Swap(&other->rules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Grammar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Grammar_descriptor_;
  metadata.reflection = Grammar_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sparrowhawk
}  // namespace speech

// @@protoc_insertion_point(global_scope)
