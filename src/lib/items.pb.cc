// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: items.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "items.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace speech {
namespace sparrowhawk {

namespace {

const ::google::protobuf::Descriptor* Token_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Token_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Token_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Token_PauseLength_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Word_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Word_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinguisticStructure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinguisticStructure_reflection_ = NULL;
const ::google::protobuf::Descriptor* Utterance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Utterance_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_items_2eproto() {
  protobuf_AddDesc_items_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "items.proto");
  GOOGLE_CHECK(file != NULL);
  Token_descriptor_ = file->message_type(0);
  static const int Token_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, end_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, wordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, spelling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, phrase_break_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, pause_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, pause_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, spelling_with_stress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, next_space_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, cardinal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, ordinal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, digit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, decimal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, measure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, telephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, electronic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, verbatim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, letters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, connector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, abbreviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, first_daughter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, last_daughter_),
  };
  Token_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Token_descriptor_,
      Token::default_instance_,
      Token_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Token, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Token));
  Token_Type_descriptor_ = Token_descriptor_->enum_type(0);
  Token_PauseLength_descriptor_ = Token_descriptor_->enum_type(1);
  Word_descriptor_ = file->message_type(1);
  static const int Word_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, spelling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, pause_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, precedes_pause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, parent_),
  };
  Word_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Word_descriptor_,
      Word::default_instance_,
      Word_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Word));
  LinguisticStructure_descriptor_ = file->message_type(2);
  static const int LinguisticStructure_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinguisticStructure, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinguisticStructure, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinguisticStructure, tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinguisticStructure, words_),
  };
  LinguisticStructure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinguisticStructure_descriptor_,
      LinguisticStructure::default_instance_,
      LinguisticStructure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinguisticStructure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinguisticStructure, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinguisticStructure, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinguisticStructure));
  Utterance_descriptor_ = file->message_type(3);
  static const int Utterance_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utterance, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utterance, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utterance, sentence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utterance, original_sentence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utterance, segmenter_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utterance, linguistic_),
  };
  Utterance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Utterance_descriptor_,
      Utterance::default_instance_,
      Utterance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utterance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utterance, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Utterance, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Utterance));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_items_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Token_descriptor_, &Token::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Word_descriptor_, &Word::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinguisticStructure_descriptor_, &LinguisticStructure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Utterance_descriptor_, &Utterance::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_items_2eproto() {
  delete Token::default_instance_;
  delete Token_reflection_;
  delete Word::default_instance_;
  delete Word_reflection_;
  delete LinguisticStructure::default_instance_;
  delete LinguisticStructure_reflection_;
  delete Utterance::default_instance_;
  delete Utterance_reflection_;
}

void protobuf_AddDesc_items_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::speech::sparrowhawk::protobuf_AddDesc_links_2eproto();
  ::speech::sparrowhawk::protobuf_AddDesc_semiotic_5fclasses_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013items.proto\022\022speech.sparrowhawk\032\013links"
    ".proto\032\026semiotic_classes.proto\"\335\t\n\005Token"
    "\022(\n\005links\030\001 \001(\0132\031.speech.sparrowhawk.Lin"
    "ks\022\023\n\013start_index\030\002 \001(\r\022\021\n\tend_index\030\003 \001"
    "(\r\022\014\n\004name\030\004 \001(\t\022,\n\004type\030\005 \001(\0162\036.speech."
    "sparrowhawk.Token.Type\022\016\n\006wordid\030\006 \001(\t\022\020"
    "\n\010spelling\030\007 \001(\t\022\024\n\014phrase_break\030\010 \001(\010\022\026"
    "\n\016pause_duration\030\t \001(\002\022G\n\014pause_length\030\n"
    " \001(\0162%.speech.sparrowhawk.Token.PauseLen"
    "gth:\nPAUSE_NONE\022\034\n\024spelling_with_stress\030"
    "\013 \001(\t\022\014\n\004skip\030\014 \001(\010\022\022\n\nnext_space\030\r \001(\010\022"
    ".\n\010cardinal\030\016 \001(\0132\034.speech.sparrowhawk.C"
    "ardinal\022,\n\007ordinal\030\017 \001(\0132\033.speech.sparro"
    "whawk.Ordinal\022\r\n\005digit\030\020 \001(\t\022,\n\007decimal\030"
    "\021 \001(\0132\033.speech.sparrowhawk.Decimal\022.\n\010fr"
    "action\030\022 \001(\0132\034.speech.sparrowhawk.Fracti"
    "on\022&\n\004time\030\023 \001(\0132\030.speech.sparrowhawk.Ti"
    "me\022,\n\007measure\030\024 \001(\0132\033.speech.sparrowhawk"
    ".Measure\022,\n\007percent\030\025 \001(\0132\033.speech.sparr"
    "owhawk.Decimal\022&\n\004date\030\026 \001(\0132\030.speech.sp"
    "arrowhawk.Date\0220\n\ttelephone\030\027 \001(\0132\035.spee"
    "ch.sparrowhawk.Telephone\022(\n\005money\030\030 \001(\0132"
    "\031.speech.sparrowhawk.Money\0222\n\nelectronic"
    "\030\031 \001(\0132\036.speech.sparrowhawk.Electronic\022\020"
    "\n\010verbatim\030\032 \001(\t\022\017\n\007letters\030\033 \001(\t\0220\n\tcon"
    "nector\030\034 \001(\0132\035.speech.sparrowhawk.Connec"
    "tor\0226\n\014abbreviation\030\035 \001(\0132 .speech.sparr"
    "owhawk.Abbreviation\022\026\n\016first_daughter\030\036 "
    "\001(\005\022\025\n\rlast_daughter\030\037 \001(\005\"M\n\004Type\022\010\n\004WO"
    "RD\020\001\022\022\n\016SEMIOTIC_CLASS\020\002\022\t\n\005PUNCT\020\003\022\034\n\030W"
    "ORD_NEEDS_VERBALIZATION\020\004\"P\n\013PauseLength"
    "\022\016\n\nPAUSE_NONE\020\000\022\017\n\013PAUSE_SHORT\020\001\022\020\n\014PAU"
    "SE_MEDIUM\020\002\022\016\n\nPAUSE_LONG\020\003*\t\010\350\007\020\200\200\200\200\002\"\227"
    "\001\n\004Word\022(\n\005links\030\001 \001(\0132\031.speech.sparrowh"
    "awk.Links\022\n\n\002id\030\002 \001(\t\022\020\n\010spelling\030\003 \001(\t\022"
    "\024\n\014pause_length\030\004 \001(\002\022\026\n\016precedes_pause\030"
    "\005 \001(\010\022\016\n\006parent\030\006 \001(\005*\t\010\350\007\020\200\200\200\200\002\"\217\001\n\023Lin"
    "guisticStructure\022\n\n\002id\030\001 \001(\003\022\r\n\005input\030\002 "
    "\001(\t\022)\n\006tokens\030\003 \003(\0132\031.speech.sparrowhawk"
    ".Token\022\'\n\005words\030\004 \003(\0132\030.speech.sparrowha"
    "wk.Word*\t\010\350\007\020\200\200\200\200\002\"\270\001\n\tUtterance\022\n\n\002id\030\001"
    " \001(\004\022\020\n\010filename\030\002 \001(\t\022\020\n\010sentence\030\003 \001(\t"
    "\022\031\n\021original_sentence\030\004 \001(\t\022\030\n\020segmenter"
    "_output\030\005 \003(\t\022;\n\nlinguistic\030\006 \001(\0132\'.spee"
    "ch.sparrowhawk.LinguisticStructure*\t\010\350\007\020"
    "\200\200\200\200\002", 1805);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "items.proto", &protobuf_RegisterTypes);
  Token::default_instance_ = new Token();
  Word::default_instance_ = new Word();
  LinguisticStructure::default_instance_ = new LinguisticStructure();
  Utterance::default_instance_ = new Utterance();
  Token::default_instance_->InitAsDefaultInstance();
  Word::default_instance_->InitAsDefaultInstance();
  LinguisticStructure::default_instance_->InitAsDefaultInstance();
  Utterance::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_items_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_items_2eproto {
  StaticDescriptorInitializer_items_2eproto() {
    protobuf_AddDesc_items_2eproto();
  }
} static_descriptor_initializer_items_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Token_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Token_Type_descriptor_;
}
bool Token_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Token_Type Token::WORD;
const Token_Type Token::SEMIOTIC_CLASS;
const Token_Type Token::PUNCT;
const Token_Type Token::WORD_NEEDS_VERBALIZATION;
const Token_Type Token::Type_MIN;
const Token_Type Token::Type_MAX;
const int Token::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Token_PauseLength_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Token_PauseLength_descriptor_;
}
bool Token_PauseLength_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Token_PauseLength Token::PAUSE_NONE;
const Token_PauseLength Token::PAUSE_SHORT;
const Token_PauseLength Token::PAUSE_MEDIUM;
const Token_PauseLength Token::PAUSE_LONG;
const Token_PauseLength Token::PauseLength_MIN;
const Token_PauseLength Token::PauseLength_MAX;
const int Token::PauseLength_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Token::kLinksFieldNumber;
const int Token::kStartIndexFieldNumber;
const int Token::kEndIndexFieldNumber;
const int Token::kNameFieldNumber;
const int Token::kTypeFieldNumber;
const int Token::kWordidFieldNumber;
const int Token::kSpellingFieldNumber;
const int Token::kPhraseBreakFieldNumber;
const int Token::kPauseDurationFieldNumber;
const int Token::kPauseLengthFieldNumber;
const int Token::kSpellingWithStressFieldNumber;
const int Token::kSkipFieldNumber;
const int Token::kNextSpaceFieldNumber;
const int Token::kCardinalFieldNumber;
const int Token::kOrdinalFieldNumber;
const int Token::kDigitFieldNumber;
const int Token::kDecimalFieldNumber;
const int Token::kFractionFieldNumber;
const int Token::kTimeFieldNumber;
const int Token::kMeasureFieldNumber;
const int Token::kPercentFieldNumber;
const int Token::kDateFieldNumber;
const int Token::kTelephoneFieldNumber;
const int Token::kMoneyFieldNumber;
const int Token::kElectronicFieldNumber;
const int Token::kVerbatimFieldNumber;
const int Token::kLettersFieldNumber;
const int Token::kConnectorFieldNumber;
const int Token::kAbbreviationFieldNumber;
const int Token::kFirstDaughterFieldNumber;
const int Token::kLastDaughterFieldNumber;
#endif  // !_MSC_VER

Token::Token()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Token::InitAsDefaultInstance() {
  links_ = const_cast< ::speech::sparrowhawk::Links*>(&::speech::sparrowhawk::Links::default_instance());
  cardinal_ = const_cast< ::speech::sparrowhawk::Cardinal*>(&::speech::sparrowhawk::Cardinal::default_instance());
  ordinal_ = const_cast< ::speech::sparrowhawk::Ordinal*>(&::speech::sparrowhawk::Ordinal::default_instance());
  decimal_ = const_cast< ::speech::sparrowhawk::Decimal*>(&::speech::sparrowhawk::Decimal::default_instance());
  fraction_ = const_cast< ::speech::sparrowhawk::Fraction*>(&::speech::sparrowhawk::Fraction::default_instance());
  time_ = const_cast< ::speech::sparrowhawk::Time*>(&::speech::sparrowhawk::Time::default_instance());
  measure_ = const_cast< ::speech::sparrowhawk::Measure*>(&::speech::sparrowhawk::Measure::default_instance());
  percent_ = const_cast< ::speech::sparrowhawk::Decimal*>(&::speech::sparrowhawk::Decimal::default_instance());
  date_ = const_cast< ::speech::sparrowhawk::Date*>(&::speech::sparrowhawk::Date::default_instance());
  telephone_ = const_cast< ::speech::sparrowhawk::Telephone*>(&::speech::sparrowhawk::Telephone::default_instance());
  money_ = const_cast< ::speech::sparrowhawk::Money*>(&::speech::sparrowhawk::Money::default_instance());
  electronic_ = const_cast< ::speech::sparrowhawk::Electronic*>(&::speech::sparrowhawk::Electronic::default_instance());
  connector_ = const_cast< ::speech::sparrowhawk::Connector*>(&::speech::sparrowhawk::Connector::default_instance());
  abbreviation_ = const_cast< ::speech::sparrowhawk::Abbreviation*>(&::speech::sparrowhawk::Abbreviation::default_instance());
}

Token::Token(const Token& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Token::SharedCtor() {
  _cached_size_ = 0;
  links_ = NULL;
  start_index_ = 0u;
  end_index_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  wordid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spelling_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phrase_break_ = false;
  pause_duration_ = 0;
  pause_length_ = 0;
  spelling_with_stress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skip_ = false;
  next_space_ = false;
  cardinal_ = NULL;
  ordinal_ = NULL;
  digit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decimal_ = NULL;
  fraction_ = NULL;
  time_ = NULL;
  measure_ = NULL;
  percent_ = NULL;
  date_ = NULL;
  telephone_ = NULL;
  money_ = NULL;
  electronic_ = NULL;
  verbatim_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  letters_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connector_ = NULL;
  abbreviation_ = NULL;
  first_daughter_ = 0;
  last_daughter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Token::~Token() {
  SharedDtor();
}

void Token::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (wordid_ != &::google::protobuf::internal::kEmptyString) {
    delete wordid_;
  }
  if (spelling_ != &::google::protobuf::internal::kEmptyString) {
    delete spelling_;
  }
  if (spelling_with_stress_ != &::google::protobuf::internal::kEmptyString) {
    delete spelling_with_stress_;
  }
  if (digit_ != &::google::protobuf::internal::kEmptyString) {
    delete digit_;
  }
  if (verbatim_ != &::google::protobuf::internal::kEmptyString) {
    delete verbatim_;
  }
  if (letters_ != &::google::protobuf::internal::kEmptyString) {
    delete letters_;
  }
  if (this != default_instance_) {
    delete links_;
    delete cardinal_;
    delete ordinal_;
    delete decimal_;
    delete fraction_;
    delete time_;
    delete measure_;
    delete percent_;
    delete date_;
    delete telephone_;
    delete money_;
    delete electronic_;
    delete connector_;
    delete abbreviation_;
  }
}

void Token::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Token::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Token_descriptor_;
}

const Token& Token::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_items_2eproto();
  return *default_instance_;
}

Token* Token::default_instance_ = NULL;

Token* Token::New() const {
  return new Token;
}

void Token::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_links()) {
      if (links_ != NULL) links_->::speech::sparrowhawk::Links::Clear();
    }
    start_index_ = 0u;
    end_index_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 1;
    if (has_wordid()) {
      if (wordid_ != &::google::protobuf::internal::kEmptyString) {
        wordid_->clear();
      }
    }
    if (has_spelling()) {
      if (spelling_ != &::google::protobuf::internal::kEmptyString) {
        spelling_->clear();
      }
    }
    phrase_break_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pause_duration_ = 0;
    pause_length_ = 0;
    if (has_spelling_with_stress()) {
      if (spelling_with_stress_ != &::google::protobuf::internal::kEmptyString) {
        spelling_with_stress_->clear();
      }
    }
    skip_ = false;
    next_space_ = false;
    if (has_cardinal()) {
      if (cardinal_ != NULL) cardinal_->::speech::sparrowhawk::Cardinal::Clear();
    }
    if (has_ordinal()) {
      if (ordinal_ != NULL) ordinal_->::speech::sparrowhawk::Ordinal::Clear();
    }
    if (has_digit()) {
      if (digit_ != &::google::protobuf::internal::kEmptyString) {
        digit_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_decimal()) {
      if (decimal_ != NULL) decimal_->::speech::sparrowhawk::Decimal::Clear();
    }
    if (has_fraction()) {
      if (fraction_ != NULL) fraction_->::speech::sparrowhawk::Fraction::Clear();
    }
    if (has_time()) {
      if (time_ != NULL) time_->::speech::sparrowhawk::Time::Clear();
    }
    if (has_measure()) {
      if (measure_ != NULL) measure_->::speech::sparrowhawk::Measure::Clear();
    }
    if (has_percent()) {
      if (percent_ != NULL) percent_->::speech::sparrowhawk::Decimal::Clear();
    }
    if (has_date()) {
      if (date_ != NULL) date_->::speech::sparrowhawk::Date::Clear();
    }
    if (has_telephone()) {
      if (telephone_ != NULL) telephone_->::speech::sparrowhawk::Telephone::Clear();
    }
    if (has_money()) {
      if (money_ != NULL) money_->::speech::sparrowhawk::Money::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_electronic()) {
      if (electronic_ != NULL) electronic_->::speech::sparrowhawk::Electronic::Clear();
    }
    if (has_verbatim()) {
      if (verbatim_ != &::google::protobuf::internal::kEmptyString) {
        verbatim_->clear();
      }
    }
    if (has_letters()) {
      if (letters_ != &::google::protobuf::internal::kEmptyString) {
        letters_->clear();
      }
    }
    if (has_connector()) {
      if (connector_ != NULL) connector_->::speech::sparrowhawk::Connector::Clear();
    }
    if (has_abbreviation()) {
      if (abbreviation_ != NULL) abbreviation_->::speech::sparrowhawk::Abbreviation::Clear();
    }
    first_daughter_ = 0;
    last_daughter_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Token::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .speech.sparrowhawk.Links links = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_links()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_index;
        break;
      }

      // optional uint32 start_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_index;
        break;
      }

      // optional uint32 end_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .speech.sparrowhawk.Token.Type type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::speech::sparrowhawk::Token_Type_IsValid(value)) {
            set_type(static_cast< ::speech::sparrowhawk::Token_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_wordid;
        break;
      }

      // optional string wordid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wordid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wordid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wordid().data(), this->wordid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_spelling;
        break;
      }

      // optional string spelling = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spelling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spelling()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spelling().data(), this->spelling().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_phrase_break;
        break;
      }

      // optional bool phrase_break = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phrase_break:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &phrase_break_)));
          set_has_phrase_break();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_pause_duration;
        break;
      }

      // optional float pause_duration = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pause_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pause_duration_)));
          set_has_pause_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pause_length;
        break;
      }

      // optional .speech.sparrowhawk.Token.PauseLength pause_length = 10 [default = PAUSE_NONE];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pause_length:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::speech::sparrowhawk::Token_PauseLength_IsValid(value)) {
            set_pause_length(static_cast< ::speech::sparrowhawk::Token_PauseLength >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_spelling_with_stress;
        break;
      }

      // optional string spelling_with_stress = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spelling_with_stress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spelling_with_stress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spelling_with_stress().data(), this->spelling_with_stress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_skip;
        break;
      }

      // optional bool skip = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_)));
          set_has_skip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_next_space;
        break;
      }

      // optional bool next_space = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_space:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &next_space_)));
          set_has_next_space();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cardinal;
        break;
      }

      // optional .speech.sparrowhawk.Cardinal cardinal = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardinal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardinal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_ordinal;
        break;
      }

      // optional .speech.sparrowhawk.Ordinal ordinal = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ordinal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ordinal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_digit;
        break;
      }

      // optional string digit = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_digit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_digit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->digit().data(), this->digit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_decimal;
        break;
      }

      // optional .speech.sparrowhawk.Decimal decimal = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_decimal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decimal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_fraction;
        break;
      }

      // optional .speech.sparrowhawk.Fraction fraction = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fraction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fraction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_time;
        break;
      }

      // optional .speech.sparrowhawk.Time time = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_measure;
        break;
      }

      // optional .speech.sparrowhawk.Measure measure = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_measure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_measure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_percent;
        break;
      }

      // optional .speech.sparrowhawk.Decimal percent = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_percent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_percent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_date;
        break;
      }

      // optional .speech.sparrowhawk.Date date = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_telephone;
        break;
      }

      // optional .speech.sparrowhawk.Telephone telephone = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_telephone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_telephone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_money;
        break;
      }

      // optional .speech.sparrowhawk.Money money = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_electronic;
        break;
      }

      // optional .speech.sparrowhawk.Electronic electronic = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_electronic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_electronic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_verbatim;
        break;
      }

      // optional string verbatim = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verbatim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbatim()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verbatim().data(), this->verbatim().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_letters;
        break;
      }

      // optional string letters = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_letters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_letters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->letters().data(), this->letters().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_connector;
        break;
      }

      // optional .speech.sparrowhawk.Connector connector = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_abbreviation;
        break;
      }

      // optional .speech.sparrowhawk.Abbreviation abbreviation = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_abbreviation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_abbreviation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_first_daughter;
        break;
      }

      // optional int32 first_daughter = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_daughter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_daughter_)));
          set_has_first_daughter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_last_daughter;
        break;
      }

      // optional int32 last_daughter = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_daughter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_daughter_)));
          set_has_last_daughter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Token::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .speech.sparrowhawk.Links links = 1;
  if (has_links()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->links(), output);
  }

  // optional uint32 start_index = 2;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_index(), output);
  }

  // optional uint32 end_index = 3;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_index(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional .speech.sparrowhawk.Token.Type type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional string wordid = 6;
  if (has_wordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wordid().data(), this->wordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->wordid(), output);
  }

  // optional string spelling = 7;
  if (has_spelling()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spelling().data(), this->spelling().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->spelling(), output);
  }

  // optional bool phrase_break = 8;
  if (has_phrase_break()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->phrase_break(), output);
  }

  // optional float pause_duration = 9;
  if (has_pause_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pause_duration(), output);
  }

  // optional .speech.sparrowhawk.Token.PauseLength pause_length = 10 [default = PAUSE_NONE];
  if (has_pause_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->pause_length(), output);
  }

  // optional string spelling_with_stress = 11;
  if (has_spelling_with_stress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spelling_with_stress().data(), this->spelling_with_stress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->spelling_with_stress(), output);
  }

  // optional bool skip = 12;
  if (has_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->skip(), output);
  }

  // optional bool next_space = 13;
  if (has_next_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->next_space(), output);
  }

  // optional .speech.sparrowhawk.Cardinal cardinal = 14;
  if (has_cardinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cardinal(), output);
  }

  // optional .speech.sparrowhawk.Ordinal ordinal = 15;
  if (has_ordinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->ordinal(), output);
  }

  // optional string digit = 16;
  if (has_digit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->digit().data(), this->digit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->digit(), output);
  }

  // optional .speech.sparrowhawk.Decimal decimal = 17;
  if (has_decimal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->decimal(), output);
  }

  // optional .speech.sparrowhawk.Fraction fraction = 18;
  if (has_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->fraction(), output);
  }

  // optional .speech.sparrowhawk.Time time = 19;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->time(), output);
  }

  // optional .speech.sparrowhawk.Measure measure = 20;
  if (has_measure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->measure(), output);
  }

  // optional .speech.sparrowhawk.Decimal percent = 21;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->percent(), output);
  }

  // optional .speech.sparrowhawk.Date date = 22;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->date(), output);
  }

  // optional .speech.sparrowhawk.Telephone telephone = 23;
  if (has_telephone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->telephone(), output);
  }

  // optional .speech.sparrowhawk.Money money = 24;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->money(), output);
  }

  // optional .speech.sparrowhawk.Electronic electronic = 25;
  if (has_electronic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->electronic(), output);
  }

  // optional string verbatim = 26;
  if (has_verbatim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbatim().data(), this->verbatim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->verbatim(), output);
  }

  // optional string letters = 27;
  if (has_letters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->letters().data(), this->letters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->letters(), output);
  }

  // optional .speech.sparrowhawk.Connector connector = 28;
  if (has_connector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->connector(), output);
  }

  // optional .speech.sparrowhawk.Abbreviation abbreviation = 29;
  if (has_abbreviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->abbreviation(), output);
  }

  // optional int32 first_daughter = 30;
  if (has_first_daughter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->first_daughter(), output);
  }

  // optional int32 last_daughter = 31;
  if (has_last_daughter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->last_daughter(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Token::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .speech.sparrowhawk.Links links = 1;
  if (has_links()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->links(), target);
  }

  // optional uint32 start_index = 2;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_index(), target);
  }

  // optional uint32 end_index = 3;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_index(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional .speech.sparrowhawk.Token.Type type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional string wordid = 6;
  if (has_wordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wordid().data(), this->wordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->wordid(), target);
  }

  // optional string spelling = 7;
  if (has_spelling()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spelling().data(), this->spelling().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->spelling(), target);
  }

  // optional bool phrase_break = 8;
  if (has_phrase_break()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->phrase_break(), target);
  }

  // optional float pause_duration = 9;
  if (has_pause_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pause_duration(), target);
  }

  // optional .speech.sparrowhawk.Token.PauseLength pause_length = 10 [default = PAUSE_NONE];
  if (has_pause_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->pause_length(), target);
  }

  // optional string spelling_with_stress = 11;
  if (has_spelling_with_stress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spelling_with_stress().data(), this->spelling_with_stress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->spelling_with_stress(), target);
  }

  // optional bool skip = 12;
  if (has_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->skip(), target);
  }

  // optional bool next_space = 13;
  if (has_next_space()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->next_space(), target);
  }

  // optional .speech.sparrowhawk.Cardinal cardinal = 14;
  if (has_cardinal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cardinal(), target);
  }

  // optional .speech.sparrowhawk.Ordinal ordinal = 15;
  if (has_ordinal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->ordinal(), target);
  }

  // optional string digit = 16;
  if (has_digit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->digit().data(), this->digit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->digit(), target);
  }

  // optional .speech.sparrowhawk.Decimal decimal = 17;
  if (has_decimal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->decimal(), target);
  }

  // optional .speech.sparrowhawk.Fraction fraction = 18;
  if (has_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->fraction(), target);
  }

  // optional .speech.sparrowhawk.Time time = 19;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->time(), target);
  }

  // optional .speech.sparrowhawk.Measure measure = 20;
  if (has_measure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->measure(), target);
  }

  // optional .speech.sparrowhawk.Decimal percent = 21;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->percent(), target);
  }

  // optional .speech.sparrowhawk.Date date = 22;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->date(), target);
  }

  // optional .speech.sparrowhawk.Telephone telephone = 23;
  if (has_telephone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->telephone(), target);
  }

  // optional .speech.sparrowhawk.Money money = 24;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->money(), target);
  }

  // optional .speech.sparrowhawk.Electronic electronic = 25;
  if (has_electronic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->electronic(), target);
  }

  // optional string verbatim = 26;
  if (has_verbatim()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verbatim().data(), this->verbatim().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->verbatim(), target);
  }

  // optional string letters = 27;
  if (has_letters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->letters().data(), this->letters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->letters(), target);
  }

  // optional .speech.sparrowhawk.Connector connector = 28;
  if (has_connector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->connector(), target);
  }

  // optional .speech.sparrowhawk.Abbreviation abbreviation = 29;
  if (has_abbreviation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->abbreviation(), target);
  }

  // optional int32 first_daughter = 30;
  if (has_first_daughter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->first_daughter(), target);
  }

  // optional int32 last_daughter = 31;
  if (has_last_daughter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->last_daughter(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Token::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .speech.sparrowhawk.Links links = 1;
    if (has_links()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->links());
    }

    // optional uint32 start_index = 2;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional uint32 end_index = 3;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_index());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .speech.sparrowhawk.Token.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string wordid = 6;
    if (has_wordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wordid());
    }

    // optional string spelling = 7;
    if (has_spelling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spelling());
    }

    // optional bool phrase_break = 8;
    if (has_phrase_break()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float pause_duration = 9;
    if (has_pause_duration()) {
      total_size += 1 + 4;
    }

    // optional .speech.sparrowhawk.Token.PauseLength pause_length = 10 [default = PAUSE_NONE];
    if (has_pause_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pause_length());
    }

    // optional string spelling_with_stress = 11;
    if (has_spelling_with_stress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spelling_with_stress());
    }

    // optional bool skip = 12;
    if (has_skip()) {
      total_size += 1 + 1;
    }

    // optional bool next_space = 13;
    if (has_next_space()) {
      total_size += 1 + 1;
    }

    // optional .speech.sparrowhawk.Cardinal cardinal = 14;
    if (has_cardinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardinal());
    }

    // optional .speech.sparrowhawk.Ordinal ordinal = 15;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ordinal());
    }

    // optional string digit = 16;
    if (has_digit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->digit());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .speech.sparrowhawk.Decimal decimal = 17;
    if (has_decimal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decimal());
    }

    // optional .speech.sparrowhawk.Fraction fraction = 18;
    if (has_fraction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fraction());
    }

    // optional .speech.sparrowhawk.Time time = 19;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // optional .speech.sparrowhawk.Measure measure = 20;
    if (has_measure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->measure());
    }

    // optional .speech.sparrowhawk.Decimal percent = 21;
    if (has_percent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->percent());
    }

    // optional .speech.sparrowhawk.Date date = 22;
    if (has_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date());
    }

    // optional .speech.sparrowhawk.Telephone telephone = 23;
    if (has_telephone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->telephone());
    }

    // optional .speech.sparrowhawk.Money money = 24;
    if (has_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->money());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .speech.sparrowhawk.Electronic electronic = 25;
    if (has_electronic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->electronic());
    }

    // optional string verbatim = 26;
    if (has_verbatim()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbatim());
    }

    // optional string letters = 27;
    if (has_letters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->letters());
    }

    // optional .speech.sparrowhawk.Connector connector = 28;
    if (has_connector()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connector());
    }

    // optional .speech.sparrowhawk.Abbreviation abbreviation = 29;
    if (has_abbreviation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->abbreviation());
    }

    // optional int32 first_daughter = 30;
    if (has_first_daughter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_daughter());
    }

    // optional int32 last_daughter = 31;
    if (has_last_daughter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_daughter());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Token::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Token* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Token*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Token::MergeFrom(const Token& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_links()) {
      mutable_links()->::speech::sparrowhawk::Links::MergeFrom(from.links());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_wordid()) {
      set_wordid(from.wordid());
    }
    if (from.has_spelling()) {
      set_spelling(from.spelling());
    }
    if (from.has_phrase_break()) {
      set_phrase_break(from.phrase_break());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pause_duration()) {
      set_pause_duration(from.pause_duration());
    }
    if (from.has_pause_length()) {
      set_pause_length(from.pause_length());
    }
    if (from.has_spelling_with_stress()) {
      set_spelling_with_stress(from.spelling_with_stress());
    }
    if (from.has_skip()) {
      set_skip(from.skip());
    }
    if (from.has_next_space()) {
      set_next_space(from.next_space());
    }
    if (from.has_cardinal()) {
      mutable_cardinal()->::speech::sparrowhawk::Cardinal::MergeFrom(from.cardinal());
    }
    if (from.has_ordinal()) {
      mutable_ordinal()->::speech::sparrowhawk::Ordinal::MergeFrom(from.ordinal());
    }
    if (from.has_digit()) {
      set_digit(from.digit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_decimal()) {
      mutable_decimal()->::speech::sparrowhawk::Decimal::MergeFrom(from.decimal());
    }
    if (from.has_fraction()) {
      mutable_fraction()->::speech::sparrowhawk::Fraction::MergeFrom(from.fraction());
    }
    if (from.has_time()) {
      mutable_time()->::speech::sparrowhawk::Time::MergeFrom(from.time());
    }
    if (from.has_measure()) {
      mutable_measure()->::speech::sparrowhawk::Measure::MergeFrom(from.measure());
    }
    if (from.has_percent()) {
      mutable_percent()->::speech::sparrowhawk::Decimal::MergeFrom(from.percent());
    }
    if (from.has_date()) {
      mutable_date()->::speech::sparrowhawk::Date::MergeFrom(from.date());
    }
    if (from.has_telephone()) {
      mutable_telephone()->::speech::sparrowhawk::Telephone::MergeFrom(from.telephone());
    }
    if (from.has_money()) {
      mutable_money()->::speech::sparrowhawk::Money::MergeFrom(from.money());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_electronic()) {
      mutable_electronic()->::speech::sparrowhawk::Electronic::MergeFrom(from.electronic());
    }
    if (from.has_verbatim()) {
      set_verbatim(from.verbatim());
    }
    if (from.has_letters()) {
      set_letters(from.letters());
    }
    if (from.has_connector()) {
      mutable_connector()->::speech::sparrowhawk::Connector::MergeFrom(from.connector());
    }
    if (from.has_abbreviation()) {
      mutable_abbreviation()->::speech::sparrowhawk::Abbreviation::MergeFrom(from.abbreviation());
    }
    if (from.has_first_daughter()) {
      set_first_daughter(from.first_daughter());
    }
    if (from.has_last_daughter()) {
      set_last_daughter(from.last_daughter());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Token::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Token::CopyFrom(const Token& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {

  if (has_cardinal()) {
    if (!this->cardinal().IsInitialized()) return false;
  }
  if (has_ordinal()) {
    if (!this->ordinal().IsInitialized()) return false;
  }
  if (has_fraction()) {
    if (!this->fraction().IsInitialized()) return false;
  }
  if (has_measure()) {
    if (!this->measure().IsInitialized()) return false;
  }
  if (has_money()) {
    if (!this->money().IsInitialized()) return false;
  }
  if (has_abbreviation()) {
    if (!this->abbreviation().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Token::Swap(Token* other) {
  if (other != this) {
    std::swap(links_, other->links_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(wordid_, other->wordid_);
    std::swap(spelling_, other->spelling_);
    std::swap(phrase_break_, other->phrase_break_);
    std::swap(pause_duration_, other->pause_duration_);
    std::swap(pause_length_, other->pause_length_);
    std::swap(spelling_with_stress_, other->spelling_with_stress_);
    std::swap(skip_, other->skip_);
    std::swap(next_space_, other->next_space_);
    std::swap(cardinal_, other->cardinal_);
    std::swap(ordinal_, other->ordinal_);
    std::swap(digit_, other->digit_);
    std::swap(decimal_, other->decimal_);
    std::swap(fraction_, other->fraction_);
    std::swap(time_, other->time_);
    std::swap(measure_, other->measure_);
    std::swap(percent_, other->percent_);
    std::swap(date_, other->date_);
    std::swap(telephone_, other->telephone_);
    std::swap(money_, other->money_);
    std::swap(electronic_, other->electronic_);
    std::swap(verbatim_, other->verbatim_);
    std::swap(letters_, other->letters_);
    std::swap(connector_, other->connector_);
    std::swap(abbreviation_, other->abbreviation_);
    std::swap(first_daughter_, other->first_daughter_);
    std::swap(last_daughter_, other->last_daughter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Token::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Token_descriptor_;
  metadata.reflection = Token_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Word::kLinksFieldNumber;
const int Word::kIdFieldNumber;
const int Word::kSpellingFieldNumber;
const int Word::kPauseLengthFieldNumber;
const int Word::kPrecedesPauseFieldNumber;
const int Word::kParentFieldNumber;
#endif  // !_MSC_VER

Word::Word()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Word::InitAsDefaultInstance() {
  links_ = const_cast< ::speech::sparrowhawk::Links*>(&::speech::sparrowhawk::Links::default_instance());
}

Word::Word(const Word& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Word::SharedCtor() {
  _cached_size_ = 0;
  links_ = NULL;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spelling_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pause_length_ = 0;
  precedes_pause_ = false;
  parent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Word::~Word() {
  SharedDtor();
}

void Word::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (spelling_ != &::google::protobuf::internal::kEmptyString) {
    delete spelling_;
  }
  if (this != default_instance_) {
    delete links_;
  }
}

void Word::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Word::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Word_descriptor_;
}

const Word& Word::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_items_2eproto();
  return *default_instance_;
}

Word* Word::default_instance_ = NULL;

Word* Word::New() const {
  return new Word;
}

void Word::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_links()) {
      if (links_ != NULL) links_->::speech::sparrowhawk::Links::Clear();
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_spelling()) {
      if (spelling_ != &::google::protobuf::internal::kEmptyString) {
        spelling_->clear();
      }
    }
    pause_length_ = 0;
    precedes_pause_ = false;
    parent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Word::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .speech.sparrowhawk.Links links = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_links()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spelling;
        break;
      }

      // optional string spelling = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spelling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spelling()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spelling().data(), this->spelling().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pause_length;
        break;
      }

      // optional float pause_length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pause_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pause_length_)));
          set_has_pause_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_precedes_pause;
        break;
      }

      // optional bool precedes_pause = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precedes_pause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &precedes_pause_)));
          set_has_precedes_pause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_parent;
        break;
      }

      // optional int32 parent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_)));
          set_has_parent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Word::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .speech.sparrowhawk.Links links = 1;
  if (has_links()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->links(), output);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // optional string spelling = 3;
  if (has_spelling()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spelling().data(), this->spelling().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->spelling(), output);
  }

  // optional float pause_length = 4;
  if (has_pause_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pause_length(), output);
  }

  // optional bool precedes_pause = 5;
  if (has_precedes_pause()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->precedes_pause(), output);
  }

  // optional int32 parent = 6;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->parent(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Word::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .speech.sparrowhawk.Links links = 1;
  if (has_links()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->links(), target);
  }

  // optional string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional string spelling = 3;
  if (has_spelling()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spelling().data(), this->spelling().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->spelling(), target);
  }

  // optional float pause_length = 4;
  if (has_pause_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pause_length(), target);
  }

  // optional bool precedes_pause = 5;
  if (has_precedes_pause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->precedes_pause(), target);
  }

  // optional int32 parent = 6;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->parent(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Word::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .speech.sparrowhawk.Links links = 1;
    if (has_links()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->links());
    }

    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string spelling = 3;
    if (has_spelling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spelling());
    }

    // optional float pause_length = 4;
    if (has_pause_length()) {
      total_size += 1 + 4;
    }

    // optional bool precedes_pause = 5;
    if (has_precedes_pause()) {
      total_size += 1 + 1;
    }

    // optional int32 parent = 6;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Word::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Word* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Word*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Word::MergeFrom(const Word& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_links()) {
      mutable_links()->::speech::sparrowhawk::Links::MergeFrom(from.links());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_spelling()) {
      set_spelling(from.spelling());
    }
    if (from.has_pause_length()) {
      set_pause_length(from.pause_length());
    }
    if (from.has_precedes_pause()) {
      set_precedes_pause(from.precedes_pause());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Word::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Word::CopyFrom(const Word& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Word::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Word::Swap(Word* other) {
  if (other != this) {
    std::swap(links_, other->links_);
    std::swap(id_, other->id_);
    std::swap(spelling_, other->spelling_);
    std::swap(pause_length_, other->pause_length_);
    std::swap(precedes_pause_, other->precedes_pause_);
    std::swap(parent_, other->parent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Word::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Word_descriptor_;
  metadata.reflection = Word_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinguisticStructure::kIdFieldNumber;
const int LinguisticStructure::kInputFieldNumber;
const int LinguisticStructure::kTokensFieldNumber;
const int LinguisticStructure::kWordsFieldNumber;
#endif  // !_MSC_VER

LinguisticStructure::LinguisticStructure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinguisticStructure::InitAsDefaultInstance() {
}

LinguisticStructure::LinguisticStructure(const LinguisticStructure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinguisticStructure::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinguisticStructure::~LinguisticStructure() {
  SharedDtor();
}

void LinguisticStructure::SharedDtor() {
  if (input_ != &::google::protobuf::internal::kEmptyString) {
    delete input_;
  }
  if (this != default_instance_) {
  }
}

void LinguisticStructure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinguisticStructure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinguisticStructure_descriptor_;
}

const LinguisticStructure& LinguisticStructure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_items_2eproto();
  return *default_instance_;
}

LinguisticStructure* LinguisticStructure::default_instance_ = NULL;

LinguisticStructure* LinguisticStructure::New() const {
  return new LinguisticStructure;
}

void LinguisticStructure::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_input()) {
      if (input_ != &::google::protobuf::internal::kEmptyString) {
        input_->clear();
      }
    }
  }
  tokens_.Clear();
  words_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinguisticStructure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_input;
        break;
      }

      // optional string input = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input().data(), this->input().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tokens;
        break;
      }

      // repeated .speech.sparrowhawk.Token tokens = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tokens:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tokens()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tokens;
        if (input->ExpectTag(34)) goto parse_words;
        break;
      }

      // repeated .speech.sparrowhawk.Word words = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_words()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_words;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinguisticStructure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string input = 2;
  if (has_input()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input().data(), this->input().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->input(), output);
  }

  // repeated .speech.sparrowhawk.Token tokens = 3;
  for (int i = 0; i < this->tokens_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tokens(i), output);
  }

  // repeated .speech.sparrowhawk.Word words = 4;
  for (int i = 0; i < this->words_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->words(i), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinguisticStructure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string input = 2;
  if (has_input()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input().data(), this->input().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->input(), target);
  }

  // repeated .speech.sparrowhawk.Token tokens = 3;
  for (int i = 0; i < this->tokens_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tokens(i), target);
  }

  // repeated .speech.sparrowhawk.Word words = 4;
  for (int i = 0; i < this->words_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->words(i), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinguisticStructure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string input = 2;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input());
    }

  }
  // repeated .speech.sparrowhawk.Token tokens = 3;
  total_size += 1 * this->tokens_size();
  for (int i = 0; i < this->tokens_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tokens(i));
  }

  // repeated .speech.sparrowhawk.Word words = 4;
  total_size += 1 * this->words_size();
  for (int i = 0; i < this->words_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->words(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinguisticStructure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinguisticStructure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinguisticStructure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinguisticStructure::MergeFrom(const LinguisticStructure& from) {
  GOOGLE_CHECK_NE(&from, this);
  tokens_.MergeFrom(from.tokens_);
  words_.MergeFrom(from.words_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_input()) {
      set_input(from.input());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinguisticStructure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinguisticStructure::CopyFrom(const LinguisticStructure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinguisticStructure::IsInitialized() const {

  for (int i = 0; i < tokens_size(); i++) {
    if (!this->tokens(i).IsInitialized()) return false;
  }
  for (int i = 0; i < words_size(); i++) {
    if (!this->words(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void LinguisticStructure::Swap(LinguisticStructure* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(input_, other->input_);
    tokens_.Swap(&other->tokens_);
    words_.Swap(&other->words_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata LinguisticStructure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinguisticStructure_descriptor_;
  metadata.reflection = LinguisticStructure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Utterance::kIdFieldNumber;
const int Utterance::kFilenameFieldNumber;
const int Utterance::kSentenceFieldNumber;
const int Utterance::kOriginalSentenceFieldNumber;
const int Utterance::kSegmenterOutputFieldNumber;
const int Utterance::kLinguisticFieldNumber;
#endif  // !_MSC_VER

Utterance::Utterance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Utterance::InitAsDefaultInstance() {
  linguistic_ = const_cast< ::speech::sparrowhawk::LinguisticStructure*>(&::speech::sparrowhawk::LinguisticStructure::default_instance());
}

Utterance::Utterance(const Utterance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Utterance::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sentence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  original_sentence_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  linguistic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Utterance::~Utterance() {
  SharedDtor();
}

void Utterance::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (sentence_ != &::google::protobuf::internal::kEmptyString) {
    delete sentence_;
  }
  if (original_sentence_ != &::google::protobuf::internal::kEmptyString) {
    delete original_sentence_;
  }
  if (this != default_instance_) {
    delete linguistic_;
  }
}

void Utterance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Utterance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Utterance_descriptor_;
}

const Utterance& Utterance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_items_2eproto();
  return *default_instance_;
}

Utterance* Utterance::default_instance_ = NULL;

Utterance* Utterance::New() const {
  return new Utterance;
}

void Utterance::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_sentence()) {
      if (sentence_ != &::google::protobuf::internal::kEmptyString) {
        sentence_->clear();
      }
    }
    if (has_original_sentence()) {
      if (original_sentence_ != &::google::protobuf::internal::kEmptyString) {
        original_sentence_->clear();
      }
    }
    if (has_linguistic()) {
      if (linguistic_ != NULL) linguistic_->::speech::sparrowhawk::LinguisticStructure::Clear();
    }
  }
  segmenter_output_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Utterance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // optional string filename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sentence;
        break;
      }

      // optional string sentence = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sentence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sentence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sentence().data(), this->sentence().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_original_sentence;
        break;
      }

      // optional string original_sentence = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_sentence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_sentence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->original_sentence().data(), this->original_sentence().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_segmenter_output;
        break;
      }

      // repeated string segmenter_output = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segmenter_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_segmenter_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->segmenter_output(this->segmenter_output_size() - 1).data(),
            this->segmenter_output(this->segmenter_output_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_segmenter_output;
        if (input->ExpectTag(50)) goto parse_linguistic;
        break;
      }

      // optional .speech.sparrowhawk.LinguisticStructure linguistic = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_linguistic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linguistic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Utterance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // optional string sentence = 3;
  if (has_sentence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sentence().data(), this->sentence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sentence(), output);
  }

  // optional string original_sentence = 4;
  if (has_original_sentence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->original_sentence().data(), this->original_sentence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->original_sentence(), output);
  }

  // repeated string segmenter_output = 5;
  for (int i = 0; i < this->segmenter_output_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->segmenter_output(i).data(), this->segmenter_output(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->segmenter_output(i), output);
  }

  // optional .speech.sparrowhawk.LinguisticStructure linguistic = 6;
  if (has_linguistic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->linguistic(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Utterance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string sentence = 3;
  if (has_sentence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sentence().data(), this->sentence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sentence(), target);
  }

  // optional string original_sentence = 4;
  if (has_original_sentence()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->original_sentence().data(), this->original_sentence().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->original_sentence(), target);
  }

  // repeated string segmenter_output = 5;
  for (int i = 0; i < this->segmenter_output_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->segmenter_output(i).data(), this->segmenter_output(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->segmenter_output(i), target);
  }

  // optional .speech.sparrowhawk.LinguisticStructure linguistic = 6;
  if (has_linguistic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->linguistic(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Utterance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string filename = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string sentence = 3;
    if (has_sentence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sentence());
    }

    // optional string original_sentence = 4;
    if (has_original_sentence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->original_sentence());
    }

    // optional .speech.sparrowhawk.LinguisticStructure linguistic = 6;
    if (has_linguistic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linguistic());
    }

  }
  // repeated string segmenter_output = 5;
  total_size += 1 * this->segmenter_output_size();
  for (int i = 0; i < this->segmenter_output_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->segmenter_output(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Utterance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Utterance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Utterance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Utterance::MergeFrom(const Utterance& from) {
  GOOGLE_CHECK_NE(&from, this);
  segmenter_output_.MergeFrom(from.segmenter_output_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_sentence()) {
      set_sentence(from.sentence());
    }
    if (from.has_original_sentence()) {
      set_original_sentence(from.original_sentence());
    }
    if (from.has_linguistic()) {
      mutable_linguistic()->::speech::sparrowhawk::LinguisticStructure::MergeFrom(from.linguistic());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Utterance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Utterance::CopyFrom(const Utterance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Utterance::IsInitialized() const {

  if (has_linguistic()) {
    if (!this->linguistic().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Utterance::Swap(Utterance* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(filename_, other->filename_);
    std::swap(sentence_, other->sentence_);
    std::swap(original_sentence_, other->original_sentence_);
    segmenter_output_.Swap(&other->segmenter_output_);
    std::swap(linguistic_, other->linguistic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Utterance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Utterance_descriptor_;
  metadata.reflection = Utterance_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sparrowhawk
}  // namespace speech

// @@protoc_insertion_point(global_scope)
