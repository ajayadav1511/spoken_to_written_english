// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: semiotic_classes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "semiotic_classes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace speech {
namespace sparrowhawk {

namespace {

const ::google::protobuf::Descriptor* Cardinal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cardinal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ordinal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ordinal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fraction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fraction_reflection_ = NULL;
const ::google::protobuf::Descriptor* Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* Decimal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Decimal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Measure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Measure_reflection_ = NULL;
const ::google::protobuf::Descriptor* Date_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Date_reflection_ = NULL;
const ::google::protobuf::Descriptor* Money_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Money_reflection_ = NULL;
const ::google::protobuf::Descriptor* Telephone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Telephone_reflection_ = NULL;
const ::google::protobuf::Descriptor* Electronic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Electronic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Connector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Connector_reflection_ = NULL;
const ::google::protobuf::Descriptor* Abbreviation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Abbreviation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_semiotic_5fclasses_2eproto() {
  protobuf_AddDesc_semiotic_5fclasses_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "semiotic_classes.proto");
  GOOGLE_CHECK(file != NULL);
  Cardinal_descriptor_ = file->message_type(0);
  static const int Cardinal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cardinal, integer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cardinal, morphosyntactic_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cardinal, preserve_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cardinal, code_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cardinal, field_order_),
  };
  Cardinal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cardinal_descriptor_,
      Cardinal::default_instance_,
      Cardinal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cardinal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cardinal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cardinal));
  Ordinal_descriptor_ = file->message_type(1);
  static const int Ordinal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ordinal, integer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ordinal, morphosyntactic_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ordinal, preserve_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ordinal, code_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ordinal, field_order_),
  };
  Ordinal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ordinal_descriptor_,
      Ordinal::default_instance_,
      Ordinal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ordinal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ordinal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ordinal));
  Fraction_descriptor_ = file->message_type(2);
  static const int Fraction_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fraction, integer_part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fraction, numerator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fraction, denominator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fraction, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fraction, morphosyntactic_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fraction, preserve_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fraction, code_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fraction, negative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fraction, field_order_),
  };
  Fraction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fraction_descriptor_,
      Fraction::default_instance_,
      Fraction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fraction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fraction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fraction));
  Time_descriptor_ = file->message_type(3);
  static const int Time_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, hours_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, minutes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, speak_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, suffix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, morphosyntactic_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, preserve_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, code_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, field_order_),
  };
  Time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Time_descriptor_,
      Time::default_instance_,
      Time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Time));
  Decimal_descriptor_ = file->message_type(4);
  static const int Decimal_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, negative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, integer_part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, fractional_part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, morphosyntactic_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, preserve_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, code_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, field_order_),
  };
  Decimal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Decimal_descriptor_,
      Decimal::default_instance_,
      Decimal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Decimal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Decimal));
  Measure_descriptor_ = file->message_type(5);
  static const int Measure_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, decimal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, cardinal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, morphosyntactic_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, preserve_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, code_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, field_order_),
  };
  Measure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Measure_descriptor_,
      Measure::default_instance_,
      Measure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Measure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Measure));
  Date_descriptor_ = file->message_type(6);
  static const int Date_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, weekday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, short_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, era_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, morphosyntactic_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, preserve_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, code_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, field_order_),
  };
  Date_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Date_descriptor_,
      Date::default_instance_,
      Date_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Date, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Date));
  Money_descriptor_ = file->message_type(7);
  static const int Money_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, morphosyntactic_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, preserve_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, code_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, field_order_),
  };
  Money_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Money_descriptor_,
      Money::default_instance_,
      Money_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Money, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Money));
  Telephone_descriptor_ = file->message_type(8);
  static const int Telephone_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telephone, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telephone, number_part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telephone, extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telephone, style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telephone, morphosyntactic_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telephone, preserve_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telephone, code_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telephone, field_order_),
  };
  Telephone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Telephone_descriptor_,
      Telephone::default_instance_,
      Telephone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telephone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Telephone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Telephone));
  Electronic_descriptor_ = file->message_type(9);
  static const int Electronic_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, query_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, fragment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, morphosyntactic_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, preserve_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, code_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, field_order_),
  };
  Electronic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Electronic_descriptor_,
      Electronic::default_instance_,
      Electronic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electronic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Electronic));
  Connector_descriptor_ = file->message_type(10);
  static const int Connector_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connector, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connector, morphosyntactic_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connector, code_switch_),
  };
  Connector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Connector_descriptor_,
      Connector::default_instance_,
      Connector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Connector));
  Abbreviation_descriptor_ = file->message_type(11);
  static const int Abbreviation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abbreviation, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abbreviation, morphosyntactic_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abbreviation, code_switch_),
  };
  Abbreviation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Abbreviation_descriptor_,
      Abbreviation::default_instance_,
      Abbreviation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abbreviation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abbreviation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Abbreviation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_semiotic_5fclasses_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cardinal_descriptor_, &Cardinal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ordinal_descriptor_, &Ordinal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fraction_descriptor_, &Fraction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Time_descriptor_, &Time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Decimal_descriptor_, &Decimal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Measure_descriptor_, &Measure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Date_descriptor_, &Date::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Money_descriptor_, &Money::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Telephone_descriptor_, &Telephone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Electronic_descriptor_, &Electronic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Connector_descriptor_, &Connector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Abbreviation_descriptor_, &Abbreviation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_semiotic_5fclasses_2eproto() {
  delete Cardinal::default_instance_;
  delete Cardinal_reflection_;
  delete Ordinal::default_instance_;
  delete Ordinal_reflection_;
  delete Fraction::default_instance_;
  delete Fraction_reflection_;
  delete Time::default_instance_;
  delete Time_reflection_;
  delete Decimal::default_instance_;
  delete Decimal_reflection_;
  delete Measure::default_instance_;
  delete Measure_reflection_;
  delete Date::default_instance_;
  delete Date_reflection_;
  delete Money::default_instance_;
  delete Money_reflection_;
  delete Telephone::default_instance_;
  delete Telephone_reflection_;
  delete Electronic::default_instance_;
  delete Electronic_reflection_;
  delete Connector::default_instance_;
  delete Connector_reflection_;
  delete Abbreviation::default_instance_;
  delete Abbreviation_reflection_;
}

void protobuf_AddDesc_semiotic_5fclasses_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026semiotic_classes.proto\022\022speech.sparrow"
    "hawk\"\177\n\010Cardinal\022\017\n\007integer\030\001 \002(\t\022 \n\030mor"
    "phosyntactic_features\030\002 \001(\t\022\026\n\016preserve_"
    "order\030\003 \001(\010\022\023\n\013code_switch\030\004 \001(\t\022\023\n\013fiel"
    "d_order\030\005 \003(\t\"~\n\007Ordinal\022\017\n\007integer\030\001 \002("
    "\t\022 \n\030morphosyntactic_features\030\002 \001(\t\022\026\n\016p"
    "reserve_order\030\003 \001(\010\022\023\n\013code_switch\030\004 \001(\t"
    "\022\023\n\013field_order\030\005 \003(\t\"\321\001\n\010Fraction\022\024\n\014in"
    "teger_part\030\001 \001(\t\022\021\n\tnumerator\030\002 \002(\t\022\023\n\013d"
    "enominator\030\003 \002(\t\022\021\n\005style\030\004 \001(\005B\002\030\001\022 \n\030m"
    "orphosyntactic_features\030\005 \001(\t\022\026\n\016preserv"
    "e_order\030\006 \001(\010\022\023\n\013code_switch\030\007 \001(\t\022\020\n\010ne"
    "gative\030\010 \001(\010\022\023\n\013field_order\030\t \003(\t\"\352\001\n\004Ti"
    "me\022\r\n\005hours\030\001 \001(\005\022\017\n\007minutes\030\002 \001(\005\022\023\n\007se"
    "conds\030\003 \001(\005B\002\030\001\022\024\n\014speak_period\030\004 \001(\010\022\022\n"
    "\006suffix\030\005 \001(\tB\002\030\001\022\021\n\005style\030\006 \001(\005B\002\030\001\022\014\n\004"
    "zone\030\007 \001(\t\022 \n\030morphosyntactic_features\030\t"
    " \001(\t\022\026\n\016preserve_order\030\n \001(\010\022\023\n\013code_swi"
    "tch\030\013 \001(\t\022\023\n\013field_order\030\014 \003(\t\"\345\001\n\007Decim"
    "al\022\020\n\010negative\030\001 \001(\010\022\024\n\014integer_part\030\002 \001"
    "(\t\022\027\n\017fractional_part\030\003 \001(\t\022\020\n\010quantity\030"
    "\004 \001(\t\022\020\n\010exponent\030\005 \001(\t\022\021\n\005style\030\006 \001(\005B\002"
    "\030\001\022 \n\030morphosyntactic_features\030\007 \001(\t\022\026\n\016"
    "preserve_order\030\010 \001(\010\022\023\n\013code_switch\030\t \001("
    "\t\022\023\n\013field_order\030\n \003(\t\"\235\002\n\007Measure\022,\n\007de"
    "cimal\030\001 \001(\0132\033.speech.sparrowhawk.Decimal"
    "\022.\n\010fraction\030\002 \001(\0132\034.speech.sparrowhawk."
    "Fraction\022.\n\010cardinal\030\003 \001(\0132\034.speech.spar"
    "rowhawk.Cardinal\022\r\n\005units\030\004 \001(\t\022\021\n\005style"
    "\030\005 \001(\005B\002\030\001\022 \n\030morphosyntactic_features\030\006"
    " \001(\t\022\026\n\016preserve_order\030\007 \001(\010\022\023\n\013code_swi"
    "tch\030\010 \001(\t\022\023\n\013field_order\030\t \003(\t\"\357\001\n\004Date\022"
    "\017\n\007weekday\030\001 \001(\t\022\013\n\003day\030\002 \001(\t\022\r\n\005month\030\003"
    " \001(\t\022\014\n\004year\030\004 \001(\t\022\021\n\005style\030\005 \001(\005B\002\030\001\022\020\n"
    "\004text\030\006 \001(\tB\002\030\001\022\026\n\nshort_year\030\007 \001(\010B\002\030\001\022"
    "\013\n\003era\030\010 \001(\t\022 \n\030morphosyntactic_features"
    "\030\t \001(\t\022\026\n\016preserve_order\030\n \001(\010\022\023\n\013code_s"
    "witch\030\013 \001(\t\022\023\n\013field_order\030\014 \003(\t\"\317\001\n\005Mon"
    "ey\022+\n\006amount\030\001 \002(\0132\033.speech.sparrowhawk."
    "Decimal\022\020\n\010quantity\030\002 \001(\003\022\020\n\010currency\030\003 "
    "\002(\t\022\021\n\005style\030\004 \001(\005B\002\030\001\022 \n\030morphosyntacti"
    "c_features\030\005 \001(\t\022\026\n\016preserve_order\030\006 \001(\010"
    "\022\023\n\013code_switch\030\007 \001(\t\022\023\n\013field_order\030\010 \003"
    "(\t\"\300\001\n\tTelephone\022\024\n\014country_code\030\001 \001(\t\022\023"
    "\n\013number_part\030\002 \003(\t\022\021\n\textension\030\003 \001(\t\022\021"
    "\n\005style\030\004 \001(\005B\002\030\001\022 \n\030morphosyntactic_fea"
    "tures\030\005 \001(\t\022\026\n\016preserve_order\030\006 \001(\010\022\023\n\013c"
    "ode_switch\030\007 \001(\t\022\023\n\013field_order\030\010 \003(\t\"\375\001"
    "\n\nElectronic\022\020\n\010protocol\030\001 \001(\t\022\020\n\010userna"
    "me\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\016\n\006domain\030\004 \001"
    "(\t\022\014\n\004port\030\005 \001(\005\022\014\n\004path\030\006 \001(\t\022\024\n\014query_"
    "string\030\007 \001(\t\022\023\n\013fragment_id\030\010 \001(\t\022 \n\030mor"
    "phosyntactic_features\030\t \001(\t\022\026\n\016preserve_"
    "order\030\n \001(\010\022\023\n\013code_switch\030\013 \001(\t\022\023\n\013fiel"
    "d_order\030\014 \003(\t\"P\n\tConnector\022\014\n\004type\030\001 \001(\t"
    "\022 \n\030morphosyntactic_features\030\002 \001(\t\022\023\n\013co"
    "de_switch\030\003 \001(\t\"S\n\014Abbreviation\022\014\n\004text\030"
    "\001 \002(\t\022 \n\030morphosyntactic_features\030\002 \001(\t\022"
    "\023\n\013code_switch\030\003 \001(\t", 2340);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "semiotic_classes.proto", &protobuf_RegisterTypes);
  Cardinal::default_instance_ = new Cardinal();
  Ordinal::default_instance_ = new Ordinal();
  Fraction::default_instance_ = new Fraction();
  Time::default_instance_ = new Time();
  Decimal::default_instance_ = new Decimal();
  Measure::default_instance_ = new Measure();
  Date::default_instance_ = new Date();
  Money::default_instance_ = new Money();
  Telephone::default_instance_ = new Telephone();
  Electronic::default_instance_ = new Electronic();
  Connector::default_instance_ = new Connector();
  Abbreviation::default_instance_ = new Abbreviation();
  Cardinal::default_instance_->InitAsDefaultInstance();
  Ordinal::default_instance_->InitAsDefaultInstance();
  Fraction::default_instance_->InitAsDefaultInstance();
  Time::default_instance_->InitAsDefaultInstance();
  Decimal::default_instance_->InitAsDefaultInstance();
  Measure::default_instance_->InitAsDefaultInstance();
  Date::default_instance_->InitAsDefaultInstance();
  Money::default_instance_->InitAsDefaultInstance();
  Telephone::default_instance_->InitAsDefaultInstance();
  Electronic::default_instance_->InitAsDefaultInstance();
  Connector::default_instance_->InitAsDefaultInstance();
  Abbreviation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_semiotic_5fclasses_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_semiotic_5fclasses_2eproto {
  StaticDescriptorInitializer_semiotic_5fclasses_2eproto() {
    protobuf_AddDesc_semiotic_5fclasses_2eproto();
  }
} static_descriptor_initializer_semiotic_5fclasses_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Cardinal::kIntegerFieldNumber;
const int Cardinal::kMorphosyntacticFeaturesFieldNumber;
const int Cardinal::kPreserveOrderFieldNumber;
const int Cardinal::kCodeSwitchFieldNumber;
const int Cardinal::kFieldOrderFieldNumber;
#endif  // !_MSC_VER

Cardinal::Cardinal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Cardinal::InitAsDefaultInstance() {
}

Cardinal::Cardinal(const Cardinal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Cardinal::SharedCtor() {
  _cached_size_ = 0;
  integer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  morphosyntactic_features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preserve_order_ = false;
  code_switch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cardinal::~Cardinal() {
  SharedDtor();
}

void Cardinal::SharedDtor() {
  if (integer_ != &::google::protobuf::internal::kEmptyString) {
    delete integer_;
  }
  if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
    delete morphosyntactic_features_;
  }
  if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
    delete code_switch_;
  }
  if (this != default_instance_) {
  }
}

void Cardinal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cardinal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cardinal_descriptor_;
}

const Cardinal& Cardinal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_semiotic_5fclasses_2eproto();
  return *default_instance_;
}

Cardinal* Cardinal::default_instance_ = NULL;

Cardinal* Cardinal::New() const {
  return new Cardinal;
}

void Cardinal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_integer()) {
      if (integer_ != &::google::protobuf::internal::kEmptyString) {
        integer_->clear();
      }
    }
    if (has_morphosyntactic_features()) {
      if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
        morphosyntactic_features_->clear();
      }
    }
    preserve_order_ = false;
    if (has_code_switch()) {
      if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
        code_switch_->clear();
      }
    }
  }
  field_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cardinal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string integer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_integer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->integer().data(), this->integer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_morphosyntactic_features;
        break;
      }

      // optional string morphosyntactic_features = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphosyntactic_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_preserve_order;
        break;
      }

      // optional bool preserve_order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
          set_has_preserve_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_code_switch;
        break;
      }

      // optional string code_switch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_switch().data(), this->code_switch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_field_order;
        break;
      }

      // repeated string field_order = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_order(this->field_order_size() - 1).data(),
            this->field_order(this->field_order_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_field_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Cardinal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string integer = 1;
  if (has_integer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->integer().data(), this->integer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->integer(), output);
  }

  // optional string morphosyntactic_features = 2;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 3;
  if (has_preserve_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->preserve_order(), output);
  }

  // optional string code_switch = 4;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->code_switch(), output);
  }

  // repeated string field_order = 5;
  for (int i = 0; i < this->field_order_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->field_order(i).data(), this->field_order(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->field_order(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Cardinal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string integer = 1;
  if (has_integer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->integer().data(), this->integer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->integer(), target);
  }

  // optional string morphosyntactic_features = 2;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 3;
  if (has_preserve_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->preserve_order(), target);
  }

  // optional string code_switch = 4;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code_switch(), target);
  }

  // repeated string field_order = 5;
  for (int i = 0; i < this->field_order_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_order(i).data(), this->field_order(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->field_order(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Cardinal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string integer = 1;
    if (has_integer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->integer());
    }

    // optional string morphosyntactic_features = 2;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional bool preserve_order = 3;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

    // optional string code_switch = 4;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  // repeated string field_order = 5;
  total_size += 1 * this->field_order_size();
  for (int i = 0; i < this->field_order_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cardinal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cardinal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cardinal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cardinal::MergeFrom(const Cardinal& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_order_.MergeFrom(from.field_order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_integer()) {
      set_integer(from.integer());
    }
    if (from.has_morphosyntactic_features()) {
      set_morphosyntactic_features(from.morphosyntactic_features());
    }
    if (from.has_preserve_order()) {
      set_preserve_order(from.preserve_order());
    }
    if (from.has_code_switch()) {
      set_code_switch(from.code_switch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cardinal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cardinal::CopyFrom(const Cardinal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cardinal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Cardinal::Swap(Cardinal* other) {
  if (other != this) {
    std::swap(integer_, other->integer_);
    std::swap(morphosyntactic_features_, other->morphosyntactic_features_);
    std::swap(preserve_order_, other->preserve_order_);
    std::swap(code_switch_, other->code_switch_);
    field_order_.Swap(&other->field_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cardinal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cardinal_descriptor_;
  metadata.reflection = Cardinal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ordinal::kIntegerFieldNumber;
const int Ordinal::kMorphosyntacticFeaturesFieldNumber;
const int Ordinal::kPreserveOrderFieldNumber;
const int Ordinal::kCodeSwitchFieldNumber;
const int Ordinal::kFieldOrderFieldNumber;
#endif  // !_MSC_VER

Ordinal::Ordinal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ordinal::InitAsDefaultInstance() {
}

Ordinal::Ordinal(const Ordinal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ordinal::SharedCtor() {
  _cached_size_ = 0;
  integer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  morphosyntactic_features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preserve_order_ = false;
  code_switch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ordinal::~Ordinal() {
  SharedDtor();
}

void Ordinal::SharedDtor() {
  if (integer_ != &::google::protobuf::internal::kEmptyString) {
    delete integer_;
  }
  if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
    delete morphosyntactic_features_;
  }
  if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
    delete code_switch_;
  }
  if (this != default_instance_) {
  }
}

void Ordinal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ordinal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ordinal_descriptor_;
}

const Ordinal& Ordinal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_semiotic_5fclasses_2eproto();
  return *default_instance_;
}

Ordinal* Ordinal::default_instance_ = NULL;

Ordinal* Ordinal::New() const {
  return new Ordinal;
}

void Ordinal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_integer()) {
      if (integer_ != &::google::protobuf::internal::kEmptyString) {
        integer_->clear();
      }
    }
    if (has_morphosyntactic_features()) {
      if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
        morphosyntactic_features_->clear();
      }
    }
    preserve_order_ = false;
    if (has_code_switch()) {
      if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
        code_switch_->clear();
      }
    }
  }
  field_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ordinal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string integer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_integer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->integer().data(), this->integer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_morphosyntactic_features;
        break;
      }

      // optional string morphosyntactic_features = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphosyntactic_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_preserve_order;
        break;
      }

      // optional bool preserve_order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
          set_has_preserve_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_code_switch;
        break;
      }

      // optional string code_switch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_switch().data(), this->code_switch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_field_order;
        break;
      }

      // repeated string field_order = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_order(this->field_order_size() - 1).data(),
            this->field_order(this->field_order_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_field_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ordinal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string integer = 1;
  if (has_integer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->integer().data(), this->integer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->integer(), output);
  }

  // optional string morphosyntactic_features = 2;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 3;
  if (has_preserve_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->preserve_order(), output);
  }

  // optional string code_switch = 4;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->code_switch(), output);
  }

  // repeated string field_order = 5;
  for (int i = 0; i < this->field_order_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->field_order(i).data(), this->field_order(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->field_order(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ordinal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string integer = 1;
  if (has_integer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->integer().data(), this->integer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->integer(), target);
  }

  // optional string morphosyntactic_features = 2;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 3;
  if (has_preserve_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->preserve_order(), target);
  }

  // optional string code_switch = 4;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code_switch(), target);
  }

  // repeated string field_order = 5;
  for (int i = 0; i < this->field_order_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_order(i).data(), this->field_order(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->field_order(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ordinal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string integer = 1;
    if (has_integer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->integer());
    }

    // optional string morphosyntactic_features = 2;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional bool preserve_order = 3;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

    // optional string code_switch = 4;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  // repeated string field_order = 5;
  total_size += 1 * this->field_order_size();
  for (int i = 0; i < this->field_order_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ordinal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ordinal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ordinal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ordinal::MergeFrom(const Ordinal& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_order_.MergeFrom(from.field_order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_integer()) {
      set_integer(from.integer());
    }
    if (from.has_morphosyntactic_features()) {
      set_morphosyntactic_features(from.morphosyntactic_features());
    }
    if (from.has_preserve_order()) {
      set_preserve_order(from.preserve_order());
    }
    if (from.has_code_switch()) {
      set_code_switch(from.code_switch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ordinal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ordinal::CopyFrom(const Ordinal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ordinal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ordinal::Swap(Ordinal* other) {
  if (other != this) {
    std::swap(integer_, other->integer_);
    std::swap(morphosyntactic_features_, other->morphosyntactic_features_);
    std::swap(preserve_order_, other->preserve_order_);
    std::swap(code_switch_, other->code_switch_);
    field_order_.Swap(&other->field_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ordinal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ordinal_descriptor_;
  metadata.reflection = Ordinal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fraction::kIntegerPartFieldNumber;
const int Fraction::kNumeratorFieldNumber;
const int Fraction::kDenominatorFieldNumber;
const int Fraction::kStyleFieldNumber;
const int Fraction::kMorphosyntacticFeaturesFieldNumber;
const int Fraction::kPreserveOrderFieldNumber;
const int Fraction::kCodeSwitchFieldNumber;
const int Fraction::kNegativeFieldNumber;
const int Fraction::kFieldOrderFieldNumber;
#endif  // !_MSC_VER

Fraction::Fraction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Fraction::InitAsDefaultInstance() {
}

Fraction::Fraction(const Fraction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Fraction::SharedCtor() {
  _cached_size_ = 0;
  integer_part_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  numerator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  denominator_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_ = 0;
  morphosyntactic_features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preserve_order_ = false;
  code_switch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  negative_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fraction::~Fraction() {
  SharedDtor();
}

void Fraction::SharedDtor() {
  if (integer_part_ != &::google::protobuf::internal::kEmptyString) {
    delete integer_part_;
  }
  if (numerator_ != &::google::protobuf::internal::kEmptyString) {
    delete numerator_;
  }
  if (denominator_ != &::google::protobuf::internal::kEmptyString) {
    delete denominator_;
  }
  if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
    delete morphosyntactic_features_;
  }
  if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
    delete code_switch_;
  }
  if (this != default_instance_) {
  }
}

void Fraction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fraction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fraction_descriptor_;
}

const Fraction& Fraction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_semiotic_5fclasses_2eproto();
  return *default_instance_;
}

Fraction* Fraction::default_instance_ = NULL;

Fraction* Fraction::New() const {
  return new Fraction;
}

void Fraction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_integer_part()) {
      if (integer_part_ != &::google::protobuf::internal::kEmptyString) {
        integer_part_->clear();
      }
    }
    if (has_numerator()) {
      if (numerator_ != &::google::protobuf::internal::kEmptyString) {
        numerator_->clear();
      }
    }
    if (has_denominator()) {
      if (denominator_ != &::google::protobuf::internal::kEmptyString) {
        denominator_->clear();
      }
    }
    style_ = 0;
    if (has_morphosyntactic_features()) {
      if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
        morphosyntactic_features_->clear();
      }
    }
    preserve_order_ = false;
    if (has_code_switch()) {
      if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
        code_switch_->clear();
      }
    }
    negative_ = false;
  }
  field_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fraction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string integer_part = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_integer_part()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->integer_part().data(), this->integer_part().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_numerator;
        break;
      }

      // required string numerator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_numerator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_numerator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->numerator().data(), this->numerator().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_denominator;
        break;
      }

      // required string denominator = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_denominator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_denominator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->denominator().data(), this->denominator().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_style;
        break;
      }

      // optional int32 style = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_morphosyntactic_features;
        break;
      }

      // optional string morphosyntactic_features = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphosyntactic_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_preserve_order;
        break;
      }

      // optional bool preserve_order = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
          set_has_preserve_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_code_switch;
        break;
      }

      // optional string code_switch = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_switch().data(), this->code_switch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_negative;
        break;
      }

      // optional bool negative = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_negative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negative_)));
          set_has_negative();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_field_order;
        break;
      }

      // repeated string field_order = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_order(this->field_order_size() - 1).data(),
            this->field_order(this->field_order_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_field_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Fraction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string integer_part = 1;
  if (has_integer_part()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->integer_part().data(), this->integer_part().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->integer_part(), output);
  }

  // required string numerator = 2;
  if (has_numerator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->numerator().data(), this->numerator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->numerator(), output);
  }

  // required string denominator = 3;
  if (has_denominator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->denominator().data(), this->denominator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->denominator(), output);
  }

  // optional int32 style = 4 [deprecated = true];
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->style(), output);
  }

  // optional string morphosyntactic_features = 5;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 6;
  if (has_preserve_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->preserve_order(), output);
  }

  // optional string code_switch = 7;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->code_switch(), output);
  }

  // optional bool negative = 8;
  if (has_negative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->negative(), output);
  }

  // repeated string field_order = 9;
  for (int i = 0; i < this->field_order_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->field_order(i).data(), this->field_order(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->field_order(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Fraction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string integer_part = 1;
  if (has_integer_part()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->integer_part().data(), this->integer_part().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->integer_part(), target);
  }

  // required string numerator = 2;
  if (has_numerator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->numerator().data(), this->numerator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->numerator(), target);
  }

  // required string denominator = 3;
  if (has_denominator()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->denominator().data(), this->denominator().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->denominator(), target);
  }

  // optional int32 style = 4 [deprecated = true];
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->style(), target);
  }

  // optional string morphosyntactic_features = 5;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 6;
  if (has_preserve_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->preserve_order(), target);
  }

  // optional string code_switch = 7;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->code_switch(), target);
  }

  // optional bool negative = 8;
  if (has_negative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->negative(), target);
  }

  // repeated string field_order = 9;
  for (int i = 0; i < this->field_order_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_order(i).data(), this->field_order(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->field_order(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Fraction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string integer_part = 1;
    if (has_integer_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->integer_part());
    }

    // required string numerator = 2;
    if (has_numerator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->numerator());
    }

    // required string denominator = 3;
    if (has_denominator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->denominator());
    }

    // optional int32 style = 4 [deprecated = true];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional string morphosyntactic_features = 5;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional bool preserve_order = 6;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

    // optional string code_switch = 7;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

    // optional bool negative = 8;
    if (has_negative()) {
      total_size += 1 + 1;
    }

  }
  // repeated string field_order = 9;
  total_size += 1 * this->field_order_size();
  for (int i = 0; i < this->field_order_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fraction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fraction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fraction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fraction::MergeFrom(const Fraction& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_order_.MergeFrom(from.field_order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_integer_part()) {
      set_integer_part(from.integer_part());
    }
    if (from.has_numerator()) {
      set_numerator(from.numerator());
    }
    if (from.has_denominator()) {
      set_denominator(from.denominator());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_morphosyntactic_features()) {
      set_morphosyntactic_features(from.morphosyntactic_features());
    }
    if (from.has_preserve_order()) {
      set_preserve_order(from.preserve_order());
    }
    if (from.has_code_switch()) {
      set_code_switch(from.code_switch());
    }
    if (from.has_negative()) {
      set_negative(from.negative());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fraction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fraction::CopyFrom(const Fraction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fraction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void Fraction::Swap(Fraction* other) {
  if (other != this) {
    std::swap(integer_part_, other->integer_part_);
    std::swap(numerator_, other->numerator_);
    std::swap(denominator_, other->denominator_);
    std::swap(style_, other->style_);
    std::swap(morphosyntactic_features_, other->morphosyntactic_features_);
    std::swap(preserve_order_, other->preserve_order_);
    std::swap(code_switch_, other->code_switch_);
    std::swap(negative_, other->negative_);
    field_order_.Swap(&other->field_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fraction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fraction_descriptor_;
  metadata.reflection = Fraction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Time::kHoursFieldNumber;
const int Time::kMinutesFieldNumber;
const int Time::kSecondsFieldNumber;
const int Time::kSpeakPeriodFieldNumber;
const int Time::kSuffixFieldNumber;
const int Time::kStyleFieldNumber;
const int Time::kZoneFieldNumber;
const int Time::kMorphosyntacticFeaturesFieldNumber;
const int Time::kPreserveOrderFieldNumber;
const int Time::kCodeSwitchFieldNumber;
const int Time::kFieldOrderFieldNumber;
#endif  // !_MSC_VER

Time::Time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Time::InitAsDefaultInstance() {
}

Time::Time(const Time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Time::SharedCtor() {
  _cached_size_ = 0;
  hours_ = 0;
  minutes_ = 0;
  seconds_ = 0;
  speak_period_ = false;
  suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_ = 0;
  zone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  morphosyntactic_features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preserve_order_ = false;
  code_switch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Time::~Time() {
  SharedDtor();
}

void Time::SharedDtor() {
  if (suffix_ != &::google::protobuf::internal::kEmptyString) {
    delete suffix_;
  }
  if (zone_ != &::google::protobuf::internal::kEmptyString) {
    delete zone_;
  }
  if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
    delete morphosyntactic_features_;
  }
  if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
    delete code_switch_;
  }
  if (this != default_instance_) {
  }
}

void Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Time_descriptor_;
}

const Time& Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_semiotic_5fclasses_2eproto();
  return *default_instance_;
}

Time* Time::default_instance_ = NULL;

Time* Time::New() const {
  return new Time;
}

void Time::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hours_ = 0;
    minutes_ = 0;
    seconds_ = 0;
    speak_period_ = false;
    if (has_suffix()) {
      if (suffix_ != &::google::protobuf::internal::kEmptyString) {
        suffix_->clear();
      }
    }
    style_ = 0;
    if (has_zone()) {
      if (zone_ != &::google::protobuf::internal::kEmptyString) {
        zone_->clear();
      }
    }
    if (has_morphosyntactic_features()) {
      if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
        morphosyntactic_features_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    preserve_order_ = false;
    if (has_code_switch()) {
      if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
        code_switch_->clear();
      }
    }
  }
  field_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hours = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hours_)));
          set_has_hours();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minutes;
        break;
      }

      // optional int32 minutes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minutes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_)));
          set_has_minutes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seconds;
        break;
      }

      // optional int32 seconds = 3 [deprecated = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_speak_period;
        break;
      }

      // optional bool speak_period = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speak_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &speak_period_)));
          set_has_speak_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_suffix;
        break;
      }

      // optional string suffix = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suffix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suffix().data(), this->suffix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_style;
        break;
      }

      // optional int32 style = 6 [deprecated = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_zone;
        break;
      }

      // optional string zone = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_morphosyntactic_features;
        break;
      }

      // optional string morphosyntactic_features = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphosyntactic_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_preserve_order;
        break;
      }

      // optional bool preserve_order = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
          set_has_preserve_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_code_switch;
        break;
      }

      // optional string code_switch = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_switch().data(), this->code_switch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_field_order;
        break;
      }

      // repeated string field_order = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_order(this->field_order_size() - 1).data(),
            this->field_order(this->field_order_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_field_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 hours = 1;
  if (has_hours()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hours(), output);
  }

  // optional int32 minutes = 2;
  if (has_minutes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minutes(), output);
  }

  // optional int32 seconds = 3 [deprecated = true];
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seconds(), output);
  }

  // optional bool speak_period = 4;
  if (has_speak_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->speak_period(), output);
  }

  // optional string suffix = 5 [deprecated = true];
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->suffix(), output);
  }

  // optional int32 style = 6 [deprecated = true];
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->style(), output);
  }

  // optional string zone = 7;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->zone(), output);
  }

  // optional string morphosyntactic_features = 9;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 10;
  if (has_preserve_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->preserve_order(), output);
  }

  // optional string code_switch = 11;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->code_switch(), output);
  }

  // repeated string field_order = 12;
  for (int i = 0; i < this->field_order_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->field_order(i).data(), this->field_order(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->field_order(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hours = 1;
  if (has_hours()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hours(), target);
  }

  // optional int32 minutes = 2;
  if (has_minutes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minutes(), target);
  }

  // optional int32 seconds = 3 [deprecated = true];
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seconds(), target);
  }

  // optional bool speak_period = 4;
  if (has_speak_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->speak_period(), target);
  }

  // optional string suffix = 5 [deprecated = true];
  if (has_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suffix().data(), this->suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->suffix(), target);
  }

  // optional int32 style = 6 [deprecated = true];
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->style(), target);
  }

  // optional string zone = 7;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->zone(), target);
  }

  // optional string morphosyntactic_features = 9;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 10;
  if (has_preserve_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->preserve_order(), target);
  }

  // optional string code_switch = 11;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->code_switch(), target);
  }

  // repeated string field_order = 12;
  for (int i = 0; i < this->field_order_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_order(i).data(), this->field_order(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->field_order(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hours = 1;
    if (has_hours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hours());
    }

    // optional int32 minutes = 2;
    if (has_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutes());
    }

    // optional int32 seconds = 3 [deprecated = true];
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

    // optional bool speak_period = 4;
    if (has_speak_period()) {
      total_size += 1 + 1;
    }

    // optional string suffix = 5 [deprecated = true];
    if (has_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suffix());
    }

    // optional int32 style = 6 [deprecated = true];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional string zone = 7;
    if (has_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zone());
    }

    // optional string morphosyntactic_features = 9;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool preserve_order = 10;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

    // optional string code_switch = 11;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  // repeated string field_order = 12;
  total_size += 1 * this->field_order_size();
  for (int i = 0; i < this->field_order_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_order_.MergeFrom(from.field_order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hours()) {
      set_hours(from.hours());
    }
    if (from.has_minutes()) {
      set_minutes(from.minutes());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_speak_period()) {
      set_speak_period(from.speak_period());
    }
    if (from.has_suffix()) {
      set_suffix(from.suffix());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_zone()) {
      set_zone(from.zone());
    }
    if (from.has_morphosyntactic_features()) {
      set_morphosyntactic_features(from.morphosyntactic_features());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_preserve_order()) {
      set_preserve_order(from.preserve_order());
    }
    if (from.has_code_switch()) {
      set_code_switch(from.code_switch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {

  return true;
}

void Time::Swap(Time* other) {
  if (other != this) {
    std::swap(hours_, other->hours_);
    std::swap(minutes_, other->minutes_);
    std::swap(seconds_, other->seconds_);
    std::swap(speak_period_, other->speak_period_);
    std::swap(suffix_, other->suffix_);
    std::swap(style_, other->style_);
    std::swap(zone_, other->zone_);
    std::swap(morphosyntactic_features_, other->morphosyntactic_features_);
    std::swap(preserve_order_, other->preserve_order_);
    std::swap(code_switch_, other->code_switch_);
    field_order_.Swap(&other->field_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Time_descriptor_;
  metadata.reflection = Time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Decimal::kNegativeFieldNumber;
const int Decimal::kIntegerPartFieldNumber;
const int Decimal::kFractionalPartFieldNumber;
const int Decimal::kQuantityFieldNumber;
const int Decimal::kExponentFieldNumber;
const int Decimal::kStyleFieldNumber;
const int Decimal::kMorphosyntacticFeaturesFieldNumber;
const int Decimal::kPreserveOrderFieldNumber;
const int Decimal::kCodeSwitchFieldNumber;
const int Decimal::kFieldOrderFieldNumber;
#endif  // !_MSC_VER

Decimal::Decimal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Decimal::InitAsDefaultInstance() {
}

Decimal::Decimal(const Decimal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Decimal::SharedCtor() {
  _cached_size_ = 0;
  negative_ = false;
  integer_part_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fractional_part_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exponent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_ = 0;
  morphosyntactic_features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preserve_order_ = false;
  code_switch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Decimal::~Decimal() {
  SharedDtor();
}

void Decimal::SharedDtor() {
  if (integer_part_ != &::google::protobuf::internal::kEmptyString) {
    delete integer_part_;
  }
  if (fractional_part_ != &::google::protobuf::internal::kEmptyString) {
    delete fractional_part_;
  }
  if (quantity_ != &::google::protobuf::internal::kEmptyString) {
    delete quantity_;
  }
  if (exponent_ != &::google::protobuf::internal::kEmptyString) {
    delete exponent_;
  }
  if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
    delete morphosyntactic_features_;
  }
  if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
    delete code_switch_;
  }
  if (this != default_instance_) {
  }
}

void Decimal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Decimal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Decimal_descriptor_;
}

const Decimal& Decimal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_semiotic_5fclasses_2eproto();
  return *default_instance_;
}

Decimal* Decimal::default_instance_ = NULL;

Decimal* Decimal::New() const {
  return new Decimal;
}

void Decimal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    negative_ = false;
    if (has_integer_part()) {
      if (integer_part_ != &::google::protobuf::internal::kEmptyString) {
        integer_part_->clear();
      }
    }
    if (has_fractional_part()) {
      if (fractional_part_ != &::google::protobuf::internal::kEmptyString) {
        fractional_part_->clear();
      }
    }
    if (has_quantity()) {
      if (quantity_ != &::google::protobuf::internal::kEmptyString) {
        quantity_->clear();
      }
    }
    if (has_exponent()) {
      if (exponent_ != &::google::protobuf::internal::kEmptyString) {
        exponent_->clear();
      }
    }
    style_ = 0;
    if (has_morphosyntactic_features()) {
      if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
        morphosyntactic_features_->clear();
      }
    }
    preserve_order_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_code_switch()) {
      if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
        code_switch_->clear();
      }
    }
  }
  field_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Decimal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool negative = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negative_)));
          set_has_negative();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_integer_part;
        break;
      }

      // optional string integer_part = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_integer_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_integer_part()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->integer_part().data(), this->integer_part().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fractional_part;
        break;
      }

      // optional string fractional_part = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fractional_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fractional_part()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fractional_part().data(), this->fractional_part().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_quantity;
        break;
      }

      // optional string quantity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quantity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quantity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quantity().data(), this->quantity().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_exponent;
        break;
      }

      // optional string exponent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exponent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exponent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exponent().data(), this->exponent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_style;
        break;
      }

      // optional int32 style = 6 [deprecated = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_morphosyntactic_features;
        break;
      }

      // optional string morphosyntactic_features = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphosyntactic_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_preserve_order;
        break;
      }

      // optional bool preserve_order = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
          set_has_preserve_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_code_switch;
        break;
      }

      // optional string code_switch = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_switch().data(), this->code_switch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_field_order;
        break;
      }

      // repeated string field_order = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_order(this->field_order_size() - 1).data(),
            this->field_order(this->field_order_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_field_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Decimal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool negative = 1;
  if (has_negative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->negative(), output);
  }

  // optional string integer_part = 2;
  if (has_integer_part()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->integer_part().data(), this->integer_part().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->integer_part(), output);
  }

  // optional string fractional_part = 3;
  if (has_fractional_part()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fractional_part().data(), this->fractional_part().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fractional_part(), output);
  }

  // optional string quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quantity().data(), this->quantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->quantity(), output);
  }

  // optional string exponent = 5;
  if (has_exponent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exponent().data(), this->exponent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->exponent(), output);
  }

  // optional int32 style = 6 [deprecated = true];
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->style(), output);
  }

  // optional string morphosyntactic_features = 7;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 8;
  if (has_preserve_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->preserve_order(), output);
  }

  // optional string code_switch = 9;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->code_switch(), output);
  }

  // repeated string field_order = 10;
  for (int i = 0; i < this->field_order_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->field_order(i).data(), this->field_order(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->field_order(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Decimal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool negative = 1;
  if (has_negative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->negative(), target);
  }

  // optional string integer_part = 2;
  if (has_integer_part()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->integer_part().data(), this->integer_part().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->integer_part(), target);
  }

  // optional string fractional_part = 3;
  if (has_fractional_part()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fractional_part().data(), this->fractional_part().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fractional_part(), target);
  }

  // optional string quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quantity().data(), this->quantity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->quantity(), target);
  }

  // optional string exponent = 5;
  if (has_exponent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exponent().data(), this->exponent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exponent(), target);
  }

  // optional int32 style = 6 [deprecated = true];
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->style(), target);
  }

  // optional string morphosyntactic_features = 7;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 8;
  if (has_preserve_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->preserve_order(), target);
  }

  // optional string code_switch = 9;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->code_switch(), target);
  }

  // repeated string field_order = 10;
  for (int i = 0; i < this->field_order_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_order(i).data(), this->field_order(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->field_order(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Decimal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool negative = 1;
    if (has_negative()) {
      total_size += 1 + 1;
    }

    // optional string integer_part = 2;
    if (has_integer_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->integer_part());
    }

    // optional string fractional_part = 3;
    if (has_fractional_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fractional_part());
    }

    // optional string quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quantity());
    }

    // optional string exponent = 5;
    if (has_exponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exponent());
    }

    // optional int32 style = 6 [deprecated = true];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional string morphosyntactic_features = 7;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional bool preserve_order = 8;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string code_switch = 9;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  // repeated string field_order = 10;
  total_size += 1 * this->field_order_size();
  for (int i = 0; i < this->field_order_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Decimal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Decimal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Decimal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Decimal::MergeFrom(const Decimal& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_order_.MergeFrom(from.field_order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_negative()) {
      set_negative(from.negative());
    }
    if (from.has_integer_part()) {
      set_integer_part(from.integer_part());
    }
    if (from.has_fractional_part()) {
      set_fractional_part(from.fractional_part());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_exponent()) {
      set_exponent(from.exponent());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_morphosyntactic_features()) {
      set_morphosyntactic_features(from.morphosyntactic_features());
    }
    if (from.has_preserve_order()) {
      set_preserve_order(from.preserve_order());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_code_switch()) {
      set_code_switch(from.code_switch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Decimal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decimal::CopyFrom(const Decimal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal::IsInitialized() const {

  return true;
}

void Decimal::Swap(Decimal* other) {
  if (other != this) {
    std::swap(negative_, other->negative_);
    std::swap(integer_part_, other->integer_part_);
    std::swap(fractional_part_, other->fractional_part_);
    std::swap(quantity_, other->quantity_);
    std::swap(exponent_, other->exponent_);
    std::swap(style_, other->style_);
    std::swap(morphosyntactic_features_, other->morphosyntactic_features_);
    std::swap(preserve_order_, other->preserve_order_);
    std::swap(code_switch_, other->code_switch_);
    field_order_.Swap(&other->field_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Decimal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Decimal_descriptor_;
  metadata.reflection = Decimal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Measure::kDecimalFieldNumber;
const int Measure::kFractionFieldNumber;
const int Measure::kCardinalFieldNumber;
const int Measure::kUnitsFieldNumber;
const int Measure::kStyleFieldNumber;
const int Measure::kMorphosyntacticFeaturesFieldNumber;
const int Measure::kPreserveOrderFieldNumber;
const int Measure::kCodeSwitchFieldNumber;
const int Measure::kFieldOrderFieldNumber;
#endif  // !_MSC_VER

Measure::Measure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Measure::InitAsDefaultInstance() {
  decimal_ = const_cast< ::speech::sparrowhawk::Decimal*>(&::speech::sparrowhawk::Decimal::default_instance());
  fraction_ = const_cast< ::speech::sparrowhawk::Fraction*>(&::speech::sparrowhawk::Fraction::default_instance());
  cardinal_ = const_cast< ::speech::sparrowhawk::Cardinal*>(&::speech::sparrowhawk::Cardinal::default_instance());
}

Measure::Measure(const Measure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Measure::SharedCtor() {
  _cached_size_ = 0;
  decimal_ = NULL;
  fraction_ = NULL;
  cardinal_ = NULL;
  units_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_ = 0;
  morphosyntactic_features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preserve_order_ = false;
  code_switch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Measure::~Measure() {
  SharedDtor();
}

void Measure::SharedDtor() {
  if (units_ != &::google::protobuf::internal::kEmptyString) {
    delete units_;
  }
  if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
    delete morphosyntactic_features_;
  }
  if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
    delete code_switch_;
  }
  if (this != default_instance_) {
    delete decimal_;
    delete fraction_;
    delete cardinal_;
  }
}

void Measure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Measure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Measure_descriptor_;
}

const Measure& Measure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_semiotic_5fclasses_2eproto();
  return *default_instance_;
}

Measure* Measure::default_instance_ = NULL;

Measure* Measure::New() const {
  return new Measure;
}

void Measure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_decimal()) {
      if (decimal_ != NULL) decimal_->::speech::sparrowhawk::Decimal::Clear();
    }
    if (has_fraction()) {
      if (fraction_ != NULL) fraction_->::speech::sparrowhawk::Fraction::Clear();
    }
    if (has_cardinal()) {
      if (cardinal_ != NULL) cardinal_->::speech::sparrowhawk::Cardinal::Clear();
    }
    if (has_units()) {
      if (units_ != &::google::protobuf::internal::kEmptyString) {
        units_->clear();
      }
    }
    style_ = 0;
    if (has_morphosyntactic_features()) {
      if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
        morphosyntactic_features_->clear();
      }
    }
    preserve_order_ = false;
    if (has_code_switch()) {
      if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
        code_switch_->clear();
      }
    }
  }
  field_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Measure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .speech.sparrowhawk.Decimal decimal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decimal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fraction;
        break;
      }

      // optional .speech.sparrowhawk.Fraction fraction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fraction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fraction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cardinal;
        break;
      }

      // optional .speech.sparrowhawk.Cardinal cardinal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardinal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardinal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_units;
        break;
      }

      // optional string units = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->units().data(), this->units().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_style;
        break;
      }

      // optional int32 style = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_morphosyntactic_features;
        break;
      }

      // optional string morphosyntactic_features = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphosyntactic_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_preserve_order;
        break;
      }

      // optional bool preserve_order = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
          set_has_preserve_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_code_switch;
        break;
      }

      // optional string code_switch = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_switch().data(), this->code_switch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_field_order;
        break;
      }

      // repeated string field_order = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_order(this->field_order_size() - 1).data(),
            this->field_order(this->field_order_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_field_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Measure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .speech.sparrowhawk.Decimal decimal = 1;
  if (has_decimal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->decimal(), output);
  }

  // optional .speech.sparrowhawk.Fraction fraction = 2;
  if (has_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fraction(), output);
  }

  // optional .speech.sparrowhawk.Cardinal cardinal = 3;
  if (has_cardinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cardinal(), output);
  }

  // optional string units = 4;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->units(), output);
  }

  // optional int32 style = 5 [deprecated = true];
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->style(), output);
  }

  // optional string morphosyntactic_features = 6;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 7;
  if (has_preserve_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->preserve_order(), output);
  }

  // optional string code_switch = 8;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->code_switch(), output);
  }

  // repeated string field_order = 9;
  for (int i = 0; i < this->field_order_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->field_order(i).data(), this->field_order(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->field_order(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Measure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .speech.sparrowhawk.Decimal decimal = 1;
  if (has_decimal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->decimal(), target);
  }

  // optional .speech.sparrowhawk.Fraction fraction = 2;
  if (has_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fraction(), target);
  }

  // optional .speech.sparrowhawk.Cardinal cardinal = 3;
  if (has_cardinal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cardinal(), target);
  }

  // optional string units = 4;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->units(), target);
  }

  // optional int32 style = 5 [deprecated = true];
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->style(), target);
  }

  // optional string morphosyntactic_features = 6;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 7;
  if (has_preserve_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->preserve_order(), target);
  }

  // optional string code_switch = 8;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->code_switch(), target);
  }

  // repeated string field_order = 9;
  for (int i = 0; i < this->field_order_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_order(i).data(), this->field_order(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->field_order(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Measure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .speech.sparrowhawk.Decimal decimal = 1;
    if (has_decimal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decimal());
    }

    // optional .speech.sparrowhawk.Fraction fraction = 2;
    if (has_fraction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fraction());
    }

    // optional .speech.sparrowhawk.Cardinal cardinal = 3;
    if (has_cardinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardinal());
    }

    // optional string units = 4;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // optional int32 style = 5 [deprecated = true];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional string morphosyntactic_features = 6;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional bool preserve_order = 7;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

    // optional string code_switch = 8;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  // repeated string field_order = 9;
  total_size += 1 * this->field_order_size();
  for (int i = 0; i < this->field_order_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Measure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Measure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Measure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Measure::MergeFrom(const Measure& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_order_.MergeFrom(from.field_order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decimal()) {
      mutable_decimal()->::speech::sparrowhawk::Decimal::MergeFrom(from.decimal());
    }
    if (from.has_fraction()) {
      mutable_fraction()->::speech::sparrowhawk::Fraction::MergeFrom(from.fraction());
    }
    if (from.has_cardinal()) {
      mutable_cardinal()->::speech::sparrowhawk::Cardinal::MergeFrom(from.cardinal());
    }
    if (from.has_units()) {
      set_units(from.units());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_morphosyntactic_features()) {
      set_morphosyntactic_features(from.morphosyntactic_features());
    }
    if (from.has_preserve_order()) {
      set_preserve_order(from.preserve_order());
    }
    if (from.has_code_switch()) {
      set_code_switch(from.code_switch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Measure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measure::CopyFrom(const Measure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measure::IsInitialized() const {

  if (has_fraction()) {
    if (!this->fraction().IsInitialized()) return false;
  }
  if (has_cardinal()) {
    if (!this->cardinal().IsInitialized()) return false;
  }
  return true;
}

void Measure::Swap(Measure* other) {
  if (other != this) {
    std::swap(decimal_, other->decimal_);
    std::swap(fraction_, other->fraction_);
    std::swap(cardinal_, other->cardinal_);
    std::swap(units_, other->units_);
    std::swap(style_, other->style_);
    std::swap(morphosyntactic_features_, other->morphosyntactic_features_);
    std::swap(preserve_order_, other->preserve_order_);
    std::swap(code_switch_, other->code_switch_);
    field_order_.Swap(&other->field_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Measure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Measure_descriptor_;
  metadata.reflection = Measure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Date::kWeekdayFieldNumber;
const int Date::kDayFieldNumber;
const int Date::kMonthFieldNumber;
const int Date::kYearFieldNumber;
const int Date::kStyleFieldNumber;
const int Date::kTextFieldNumber;
const int Date::kShortYearFieldNumber;
const int Date::kEraFieldNumber;
const int Date::kMorphosyntacticFeaturesFieldNumber;
const int Date::kPreserveOrderFieldNumber;
const int Date::kCodeSwitchFieldNumber;
const int Date::kFieldOrderFieldNumber;
#endif  // !_MSC_VER

Date::Date()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Date::InitAsDefaultInstance() {
}

Date::Date(const Date& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Date::SharedCtor() {
  _cached_size_ = 0;
  weekday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  day_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  month_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  year_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  short_year_ = false;
  era_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  morphosyntactic_features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preserve_order_ = false;
  code_switch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Date::~Date() {
  SharedDtor();
}

void Date::SharedDtor() {
  if (weekday_ != &::google::protobuf::internal::kEmptyString) {
    delete weekday_;
  }
  if (day_ != &::google::protobuf::internal::kEmptyString) {
    delete day_;
  }
  if (month_ != &::google::protobuf::internal::kEmptyString) {
    delete month_;
  }
  if (year_ != &::google::protobuf::internal::kEmptyString) {
    delete year_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (era_ != &::google::protobuf::internal::kEmptyString) {
    delete era_;
  }
  if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
    delete morphosyntactic_features_;
  }
  if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
    delete code_switch_;
  }
  if (this != default_instance_) {
  }
}

void Date::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Date::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Date_descriptor_;
}

const Date& Date::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_semiotic_5fclasses_2eproto();
  return *default_instance_;
}

Date* Date::default_instance_ = NULL;

Date* Date::New() const {
  return new Date;
}

void Date::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_weekday()) {
      if (weekday_ != &::google::protobuf::internal::kEmptyString) {
        weekday_->clear();
      }
    }
    if (has_day()) {
      if (day_ != &::google::protobuf::internal::kEmptyString) {
        day_->clear();
      }
    }
    if (has_month()) {
      if (month_ != &::google::protobuf::internal::kEmptyString) {
        month_->clear();
      }
    }
    if (has_year()) {
      if (year_ != &::google::protobuf::internal::kEmptyString) {
        year_->clear();
      }
    }
    style_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    short_year_ = false;
    if (has_era()) {
      if (era_ != &::google::protobuf::internal::kEmptyString) {
        era_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_morphosyntactic_features()) {
      if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
        morphosyntactic_features_->clear();
      }
    }
    preserve_order_ = false;
    if (has_code_switch()) {
      if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
        code_switch_->clear();
      }
    }
  }
  field_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Date::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string weekday = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weekday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weekday().data(), this->weekday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_day;
        break;
      }

      // optional string day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->day().data(), this->day().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_month;
        break;
      }

      // optional string month = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_month:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_month()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->month().data(), this->month().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_year;
        break;
      }

      // optional string year = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_year:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_year()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->year().data(), this->year().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_style;
        break;
      }

      // optional int32 style = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }

      // optional string text = 6 [deprecated = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_short_year;
        break;
      }

      // optional bool short_year = 7 [deprecated = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_short_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &short_year_)));
          set_has_short_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_era;
        break;
      }

      // optional string era = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_era:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_era()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->era().data(), this->era().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_morphosyntactic_features;
        break;
      }

      // optional string morphosyntactic_features = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphosyntactic_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_preserve_order;
        break;
      }

      // optional bool preserve_order = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
          set_has_preserve_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_code_switch;
        break;
      }

      // optional string code_switch = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_switch().data(), this->code_switch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_field_order;
        break;
      }

      // repeated string field_order = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_order(this->field_order_size() - 1).data(),
            this->field_order(this->field_order_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_field_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Date::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string weekday = 1;
  if (has_weekday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekday().data(), this->weekday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->weekday(), output);
  }

  // optional string day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->day().data(), this->day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->day(), output);
  }

  // optional string month = 3;
  if (has_month()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->month().data(), this->month().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->month(), output);
  }

  // optional string year = 4;
  if (has_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->year().data(), this->year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->year(), output);
  }

  // optional int32 style = 5 [deprecated = true];
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->style(), output);
  }

  // optional string text = 6 [deprecated = true];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->text(), output);
  }

  // optional bool short_year = 7 [deprecated = true];
  if (has_short_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->short_year(), output);
  }

  // optional string era = 8;
  if (has_era()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->era().data(), this->era().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->era(), output);
  }

  // optional string morphosyntactic_features = 9;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 10;
  if (has_preserve_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->preserve_order(), output);
  }

  // optional string code_switch = 11;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->code_switch(), output);
  }

  // repeated string field_order = 12;
  for (int i = 0; i < this->field_order_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->field_order(i).data(), this->field_order(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->field_order(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Date::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string weekday = 1;
  if (has_weekday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weekday().data(), this->weekday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->weekday(), target);
  }

  // optional string day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->day().data(), this->day().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->day(), target);
  }

  // optional string month = 3;
  if (has_month()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->month().data(), this->month().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->month(), target);
  }

  // optional string year = 4;
  if (has_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->year().data(), this->year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->year(), target);
  }

  // optional int32 style = 5 [deprecated = true];
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->style(), target);
  }

  // optional string text = 6 [deprecated = true];
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  // optional bool short_year = 7 [deprecated = true];
  if (has_short_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->short_year(), target);
  }

  // optional string era = 8;
  if (has_era()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->era().data(), this->era().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->era(), target);
  }

  // optional string morphosyntactic_features = 9;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 10;
  if (has_preserve_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->preserve_order(), target);
  }

  // optional string code_switch = 11;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->code_switch(), target);
  }

  // repeated string field_order = 12;
  for (int i = 0; i < this->field_order_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_order(i).data(), this->field_order(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->field_order(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Date::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string weekday = 1;
    if (has_weekday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weekday());
    }

    // optional string day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->day());
    }

    // optional string month = 3;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->month());
    }

    // optional string year = 4;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->year());
    }

    // optional int32 style = 5 [deprecated = true];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional string text = 6 [deprecated = true];
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bool short_year = 7 [deprecated = true];
    if (has_short_year()) {
      total_size += 1 + 1;
    }

    // optional string era = 8;
    if (has_era()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->era());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string morphosyntactic_features = 9;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional bool preserve_order = 10;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

    // optional string code_switch = 11;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  // repeated string field_order = 12;
  total_size += 1 * this->field_order_size();
  for (int i = 0; i < this->field_order_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Date::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Date* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Date*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Date::MergeFrom(const Date& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_order_.MergeFrom(from.field_order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weekday()) {
      set_weekday(from.weekday());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_short_year()) {
      set_short_year(from.short_year());
    }
    if (from.has_era()) {
      set_era(from.era());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_morphosyntactic_features()) {
      set_morphosyntactic_features(from.morphosyntactic_features());
    }
    if (from.has_preserve_order()) {
      set_preserve_order(from.preserve_order());
    }
    if (from.has_code_switch()) {
      set_code_switch(from.code_switch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Date::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Date::CopyFrom(const Date& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date::IsInitialized() const {

  return true;
}

void Date::Swap(Date* other) {
  if (other != this) {
    std::swap(weekday_, other->weekday_);
    std::swap(day_, other->day_);
    std::swap(month_, other->month_);
    std::swap(year_, other->year_);
    std::swap(style_, other->style_);
    std::swap(text_, other->text_);
    std::swap(short_year_, other->short_year_);
    std::swap(era_, other->era_);
    std::swap(morphosyntactic_features_, other->morphosyntactic_features_);
    std::swap(preserve_order_, other->preserve_order_);
    std::swap(code_switch_, other->code_switch_);
    field_order_.Swap(&other->field_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Date::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Date_descriptor_;
  metadata.reflection = Date_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Money::kAmountFieldNumber;
const int Money::kQuantityFieldNumber;
const int Money::kCurrencyFieldNumber;
const int Money::kStyleFieldNumber;
const int Money::kMorphosyntacticFeaturesFieldNumber;
const int Money::kPreserveOrderFieldNumber;
const int Money::kCodeSwitchFieldNumber;
const int Money::kFieldOrderFieldNumber;
#endif  // !_MSC_VER

Money::Money()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Money::InitAsDefaultInstance() {
  amount_ = const_cast< ::speech::sparrowhawk::Decimal*>(&::speech::sparrowhawk::Decimal::default_instance());
}

Money::Money(const Money& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Money::SharedCtor() {
  _cached_size_ = 0;
  amount_ = NULL;
  quantity_ = GOOGLE_LONGLONG(0);
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_ = 0;
  morphosyntactic_features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preserve_order_ = false;
  code_switch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Money::~Money() {
  SharedDtor();
}

void Money::SharedDtor() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
    delete morphosyntactic_features_;
  }
  if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
    delete code_switch_;
  }
  if (this != default_instance_) {
    delete amount_;
  }
}

void Money::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Money::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Money_descriptor_;
}

const Money& Money::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_semiotic_5fclasses_2eproto();
  return *default_instance_;
}

Money* Money::default_instance_ = NULL;

Money* Money::New() const {
  return new Money;
}

void Money::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_amount()) {
      if (amount_ != NULL) amount_->::speech::sparrowhawk::Decimal::Clear();
    }
    quantity_ = GOOGLE_LONGLONG(0);
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    style_ = 0;
    if (has_morphosyntactic_features()) {
      if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
        morphosyntactic_features_->clear();
      }
    }
    preserve_order_ = false;
    if (has_code_switch()) {
      if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
        code_switch_->clear();
      }
    }
  }
  field_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Money::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .speech.sparrowhawk.Decimal amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_amount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quantity;
        break;
      }

      // optional int64 quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_currency;
        break;
      }

      // required string currency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_style;
        break;
      }

      // optional int32 style = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_morphosyntactic_features;
        break;
      }

      // optional string morphosyntactic_features = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphosyntactic_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_preserve_order;
        break;
      }

      // optional bool preserve_order = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
          set_has_preserve_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_code_switch;
        break;
      }

      // optional string code_switch = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_switch().data(), this->code_switch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_field_order;
        break;
      }

      // repeated string field_order = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_order(this->field_order_size() - 1).data(),
            this->field_order(this->field_order_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_field_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Money::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .speech.sparrowhawk.Decimal amount = 1;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->amount(), output);
  }

  // optional int64 quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->quantity(), output);
  }

  // required string currency = 3;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->currency(), output);
  }

  // optional int32 style = 4 [deprecated = true];
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->style(), output);
  }

  // optional string morphosyntactic_features = 5;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 6;
  if (has_preserve_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->preserve_order(), output);
  }

  // optional string code_switch = 7;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->code_switch(), output);
  }

  // repeated string field_order = 8;
  for (int i = 0; i < this->field_order_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->field_order(i).data(), this->field_order(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->field_order(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Money::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .speech.sparrowhawk.Decimal amount = 1;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->amount(), target);
  }

  // optional int64 quantity = 2;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->quantity(), target);
  }

  // required string currency = 3;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->currency(), target);
  }

  // optional int32 style = 4 [deprecated = true];
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->style(), target);
  }

  // optional string morphosyntactic_features = 5;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 6;
  if (has_preserve_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->preserve_order(), target);
  }

  // optional string code_switch = 7;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->code_switch(), target);
  }

  // repeated string field_order = 8;
  for (int i = 0; i < this->field_order_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_order(i).data(), this->field_order(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->field_order(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Money::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .speech.sparrowhawk.Decimal amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amount());
    }

    // optional int64 quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quantity());
    }

    // required string currency = 3;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional int32 style = 4 [deprecated = true];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional string morphosyntactic_features = 5;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional bool preserve_order = 6;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

    // optional string code_switch = 7;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  // repeated string field_order = 8;
  total_size += 1 * this->field_order_size();
  for (int i = 0; i < this->field_order_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Money::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Money* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Money*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Money::MergeFrom(const Money& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_order_.MergeFrom(from.field_order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_amount()) {
      mutable_amount()->::speech::sparrowhawk::Decimal::MergeFrom(from.amount());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_morphosyntactic_features()) {
      set_morphosyntactic_features(from.morphosyntactic_features());
    }
    if (from.has_preserve_order()) {
      set_preserve_order(from.preserve_order());
    }
    if (from.has_code_switch()) {
      set_code_switch(from.code_switch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Money::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Money::CopyFrom(const Money& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Money::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Money::Swap(Money* other) {
  if (other != this) {
    std::swap(amount_, other->amount_);
    std::swap(quantity_, other->quantity_);
    std::swap(currency_, other->currency_);
    std::swap(style_, other->style_);
    std::swap(morphosyntactic_features_, other->morphosyntactic_features_);
    std::swap(preserve_order_, other->preserve_order_);
    std::swap(code_switch_, other->code_switch_);
    field_order_.Swap(&other->field_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Money::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Money_descriptor_;
  metadata.reflection = Money_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Telephone::kCountryCodeFieldNumber;
const int Telephone::kNumberPartFieldNumber;
const int Telephone::kExtensionFieldNumber;
const int Telephone::kStyleFieldNumber;
const int Telephone::kMorphosyntacticFeaturesFieldNumber;
const int Telephone::kPreserveOrderFieldNumber;
const int Telephone::kCodeSwitchFieldNumber;
const int Telephone::kFieldOrderFieldNumber;
#endif  // !_MSC_VER

Telephone::Telephone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Telephone::InitAsDefaultInstance() {
}

Telephone::Telephone(const Telephone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Telephone::SharedCtor() {
  _cached_size_ = 0;
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  extension_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_ = 0;
  morphosyntactic_features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preserve_order_ = false;
  code_switch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Telephone::~Telephone() {
  SharedDtor();
}

void Telephone::SharedDtor() {
  if (country_code_ != &::google::protobuf::internal::kEmptyString) {
    delete country_code_;
  }
  if (extension_ != &::google::protobuf::internal::kEmptyString) {
    delete extension_;
  }
  if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
    delete morphosyntactic_features_;
  }
  if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
    delete code_switch_;
  }
  if (this != default_instance_) {
  }
}

void Telephone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telephone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Telephone_descriptor_;
}

const Telephone& Telephone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_semiotic_5fclasses_2eproto();
  return *default_instance_;
}

Telephone* Telephone::default_instance_ = NULL;

Telephone* Telephone::New() const {
  return new Telephone;
}

void Telephone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::kEmptyString) {
        country_code_->clear();
      }
    }
    if (has_extension()) {
      if (extension_ != &::google::protobuf::internal::kEmptyString) {
        extension_->clear();
      }
    }
    style_ = 0;
    if (has_morphosyntactic_features()) {
      if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
        morphosyntactic_features_->clear();
      }
    }
    preserve_order_ = false;
    if (has_code_switch()) {
      if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
        code_switch_->clear();
      }
    }
  }
  number_part_.Clear();
  field_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Telephone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string country_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_number_part;
        break;
      }

      // repeated string number_part = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_number_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_number_part()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->number_part(this->number_part_size() - 1).data(),
            this->number_part(this->number_part_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_number_part;
        if (input->ExpectTag(26)) goto parse_extension;
        break;
      }

      // optional string extension = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extension().data(), this->extension().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_style;
        break;
      }

      // optional int32 style = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
          set_has_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_morphosyntactic_features;
        break;
      }

      // optional string morphosyntactic_features = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphosyntactic_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_preserve_order;
        break;
      }

      // optional bool preserve_order = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
          set_has_preserve_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_code_switch;
        break;
      }

      // optional string code_switch = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_switch().data(), this->code_switch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_field_order;
        break;
      }

      // repeated string field_order = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_order(this->field_order_size() - 1).data(),
            this->field_order(this->field_order_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_field_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Telephone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string country_code = 1;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->country_code(), output);
  }

  // repeated string number_part = 2;
  for (int i = 0; i < this->number_part_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->number_part(i).data(), this->number_part(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->number_part(i), output);
  }

  // optional string extension = 3;
  if (has_extension()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extension().data(), this->extension().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->extension(), output);
  }

  // optional int32 style = 4 [deprecated = true];
  if (has_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->style(), output);
  }

  // optional string morphosyntactic_features = 5;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 6;
  if (has_preserve_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->preserve_order(), output);
  }

  // optional string code_switch = 7;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->code_switch(), output);
  }

  // repeated string field_order = 8;
  for (int i = 0; i < this->field_order_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->field_order(i).data(), this->field_order(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->field_order(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Telephone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string country_code = 1;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country_code(), target);
  }

  // repeated string number_part = 2;
  for (int i = 0; i < this->number_part_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number_part(i).data(), this->number_part(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->number_part(i), target);
  }

  // optional string extension = 3;
  if (has_extension()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extension().data(), this->extension().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extension(), target);
  }

  // optional int32 style = 4 [deprecated = true];
  if (has_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->style(), target);
  }

  // optional string morphosyntactic_features = 5;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 6;
  if (has_preserve_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->preserve_order(), target);
  }

  // optional string code_switch = 7;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->code_switch(), target);
  }

  // repeated string field_order = 8;
  for (int i = 0; i < this->field_order_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_order(i).data(), this->field_order(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->field_order(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Telephone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string country_code = 1;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string extension = 3;
    if (has_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extension());
    }

    // optional int32 style = 4 [deprecated = true];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional string morphosyntactic_features = 5;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional bool preserve_order = 6;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

    // optional string code_switch = 7;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  // repeated string number_part = 2;
  total_size += 1 * this->number_part_size();
  for (int i = 0; i < this->number_part_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->number_part(i));
  }

  // repeated string field_order = 8;
  total_size += 1 * this->field_order_size();
  for (int i = 0; i < this->field_order_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telephone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Telephone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Telephone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Telephone::MergeFrom(const Telephone& from) {
  GOOGLE_CHECK_NE(&from, this);
  number_part_.MergeFrom(from.number_part_);
  field_order_.MergeFrom(from.field_order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_extension()) {
      set_extension(from.extension());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
    if (from.has_morphosyntactic_features()) {
      set_morphosyntactic_features(from.morphosyntactic_features());
    }
    if (from.has_preserve_order()) {
      set_preserve_order(from.preserve_order());
    }
    if (from.has_code_switch()) {
      set_code_switch(from.code_switch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Telephone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telephone::CopyFrom(const Telephone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telephone::IsInitialized() const {

  return true;
}

void Telephone::Swap(Telephone* other) {
  if (other != this) {
    std::swap(country_code_, other->country_code_);
    number_part_.Swap(&other->number_part_);
    std::swap(extension_, other->extension_);
    std::swap(style_, other->style_);
    std::swap(morphosyntactic_features_, other->morphosyntactic_features_);
    std::swap(preserve_order_, other->preserve_order_);
    std::swap(code_switch_, other->code_switch_);
    field_order_.Swap(&other->field_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Telephone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Telephone_descriptor_;
  metadata.reflection = Telephone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Electronic::kProtocolFieldNumber;
const int Electronic::kUsernameFieldNumber;
const int Electronic::kPasswordFieldNumber;
const int Electronic::kDomainFieldNumber;
const int Electronic::kPortFieldNumber;
const int Electronic::kPathFieldNumber;
const int Electronic::kQueryStringFieldNumber;
const int Electronic::kFragmentIdFieldNumber;
const int Electronic::kMorphosyntacticFeaturesFieldNumber;
const int Electronic::kPreserveOrderFieldNumber;
const int Electronic::kCodeSwitchFieldNumber;
const int Electronic::kFieldOrderFieldNumber;
#endif  // !_MSC_VER

Electronic::Electronic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Electronic::InitAsDefaultInstance() {
}

Electronic::Electronic(const Electronic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Electronic::SharedCtor() {
  _cached_size_ = 0;
  protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  query_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fragment_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  morphosyntactic_features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preserve_order_ = false;
  code_switch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Electronic::~Electronic() {
  SharedDtor();
}

void Electronic::SharedDtor() {
  if (protocol_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (query_string_ != &::google::protobuf::internal::kEmptyString) {
    delete query_string_;
  }
  if (fragment_id_ != &::google::protobuf::internal::kEmptyString) {
    delete fragment_id_;
  }
  if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
    delete morphosyntactic_features_;
  }
  if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
    delete code_switch_;
  }
  if (this != default_instance_) {
  }
}

void Electronic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Electronic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Electronic_descriptor_;
}

const Electronic& Electronic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_semiotic_5fclasses_2eproto();
  return *default_instance_;
}

Electronic* Electronic::default_instance_ = NULL;

Electronic* Electronic::New() const {
  return new Electronic;
}

void Electronic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_protocol()) {
      if (protocol_ != &::google::protobuf::internal::kEmptyString) {
        protocol_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    port_ = 0;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_query_string()) {
      if (query_string_ != &::google::protobuf::internal::kEmptyString) {
        query_string_->clear();
      }
    }
    if (has_fragment_id()) {
      if (fragment_id_ != &::google::protobuf::internal::kEmptyString) {
        fragment_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_morphosyntactic_features()) {
      if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
        morphosyntactic_features_->clear();
      }
    }
    preserve_order_ = false;
    if (has_code_switch()) {
      if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
        code_switch_->clear();
      }
    }
  }
  field_order_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Electronic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string protocol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_domain;
        break;
      }

      // optional string domain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional int32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_path;
        break;
      }

      // optional string path = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_query_string;
        break;
      }

      // optional string query_string = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query_string().data(), this->query_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fragment_id;
        break;
      }

      // optional string fragment_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fragment_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fragment_id().data(), this->fragment_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_morphosyntactic_features;
        break;
      }

      // optional string morphosyntactic_features = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphosyntactic_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_preserve_order;
        break;
      }

      // optional bool preserve_order = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
          set_has_preserve_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_code_switch;
        break;
      }

      // optional string code_switch = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_switch().data(), this->code_switch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_field_order;
        break;
      }

      // repeated string field_order = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->field_order(this->field_order_size() - 1).data(),
            this->field_order(this->field_order_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_field_order;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Electronic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string protocol = 1;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->protocol(), output);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->domain(), output);
  }

  // optional int32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  // optional string path = 6;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->path(), output);
  }

  // optional string query_string = 7;
  if (has_query_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_string().data(), this->query_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->query_string(), output);
  }

  // optional string fragment_id = 8;
  if (has_fragment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fragment_id().data(), this->fragment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->fragment_id(), output);
  }

  // optional string morphosyntactic_features = 9;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 10;
  if (has_preserve_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->preserve_order(), output);
  }

  // optional string code_switch = 11;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->code_switch(), output);
  }

  // repeated string field_order = 12;
  for (int i = 0; i < this->field_order_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->field_order(i).data(), this->field_order(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->field_order(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Electronic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string protocol = 1;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->protocol(), target);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  // optional int32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  // optional string path = 6;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->path(), target);
  }

  // optional string query_string = 7;
  if (has_query_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_string().data(), this->query_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->query_string(), target);
  }

  // optional string fragment_id = 8;
  if (has_fragment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fragment_id().data(), this->fragment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fragment_id(), target);
  }

  // optional string morphosyntactic_features = 9;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 10;
  if (has_preserve_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->preserve_order(), target);
  }

  // optional string code_switch = 11;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->code_switch(), target);
  }

  // repeated string field_order = 12;
  for (int i = 0; i < this->field_order_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->field_order(i).data(), this->field_order(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->field_order(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Electronic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string protocol = 1;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional int32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string path = 6;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string query_string = 7;
    if (has_query_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_string());
    }

    // optional string fragment_id = 8;
    if (has_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fragment_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string morphosyntactic_features = 9;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional bool preserve_order = 10;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

    // optional string code_switch = 11;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  // repeated string field_order = 12;
  total_size += 1 * this->field_order_size();
  for (int i = 0; i < this->field_order_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Electronic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Electronic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Electronic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Electronic::MergeFrom(const Electronic& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_order_.MergeFrom(from.field_order_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_query_string()) {
      set_query_string(from.query_string());
    }
    if (from.has_fragment_id()) {
      set_fragment_id(from.fragment_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_morphosyntactic_features()) {
      set_morphosyntactic_features(from.morphosyntactic_features());
    }
    if (from.has_preserve_order()) {
      set_preserve_order(from.preserve_order());
    }
    if (from.has_code_switch()) {
      set_code_switch(from.code_switch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Electronic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Electronic::CopyFrom(const Electronic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Electronic::IsInitialized() const {

  return true;
}

void Electronic::Swap(Electronic* other) {
  if (other != this) {
    std::swap(protocol_, other->protocol_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(domain_, other->domain_);
    std::swap(port_, other->port_);
    std::swap(path_, other->path_);
    std::swap(query_string_, other->query_string_);
    std::swap(fragment_id_, other->fragment_id_);
    std::swap(morphosyntactic_features_, other->morphosyntactic_features_);
    std::swap(preserve_order_, other->preserve_order_);
    std::swap(code_switch_, other->code_switch_);
    field_order_.Swap(&other->field_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Electronic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Electronic_descriptor_;
  metadata.reflection = Electronic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Connector::kTypeFieldNumber;
const int Connector::kMorphosyntacticFeaturesFieldNumber;
const int Connector::kCodeSwitchFieldNumber;
#endif  // !_MSC_VER

Connector::Connector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Connector::InitAsDefaultInstance() {
}

Connector::Connector(const Connector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Connector::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  morphosyntactic_features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_switch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Connector::~Connector() {
  SharedDtor();
}

void Connector::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
    delete morphosyntactic_features_;
  }
  if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
    delete code_switch_;
  }
  if (this != default_instance_) {
  }
}

void Connector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Connector_descriptor_;
}

const Connector& Connector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_semiotic_5fclasses_2eproto();
  return *default_instance_;
}

Connector* Connector::default_instance_ = NULL;

Connector* Connector::New() const {
  return new Connector;
}

void Connector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_morphosyntactic_features()) {
      if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
        morphosyntactic_features_->clear();
      }
    }
    if (has_code_switch()) {
      if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
        code_switch_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Connector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_morphosyntactic_features;
        break;
      }

      // optional string morphosyntactic_features = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphosyntactic_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_code_switch;
        break;
      }

      // optional string code_switch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_switch().data(), this->code_switch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Connector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // optional string morphosyntactic_features = 2;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->morphosyntactic_features(), output);
  }

  // optional string code_switch = 3;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->code_switch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Connector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string morphosyntactic_features = 2;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->morphosyntactic_features(), target);
  }

  // optional string code_switch = 3;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code_switch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Connector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string morphosyntactic_features = 2;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional string code_switch = 3;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Connector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Connector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Connector::MergeFrom(const Connector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_morphosyntactic_features()) {
      set_morphosyntactic_features(from.morphosyntactic_features());
    }
    if (from.has_code_switch()) {
      set_code_switch(from.code_switch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Connector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connector::CopyFrom(const Connector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connector::IsInitialized() const {

  return true;
}

void Connector::Swap(Connector* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(morphosyntactic_features_, other->morphosyntactic_features_);
    std::swap(code_switch_, other->code_switch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Connector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Connector_descriptor_;
  metadata.reflection = Connector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Abbreviation::kTextFieldNumber;
const int Abbreviation::kMorphosyntacticFeaturesFieldNumber;
const int Abbreviation::kCodeSwitchFieldNumber;
#endif  // !_MSC_VER

Abbreviation::Abbreviation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Abbreviation::InitAsDefaultInstance() {
}

Abbreviation::Abbreviation(const Abbreviation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Abbreviation::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  morphosyntactic_features_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_switch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Abbreviation::~Abbreviation() {
  SharedDtor();
}

void Abbreviation::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
    delete morphosyntactic_features_;
  }
  if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
    delete code_switch_;
  }
  if (this != default_instance_) {
  }
}

void Abbreviation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Abbreviation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Abbreviation_descriptor_;
}

const Abbreviation& Abbreviation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_semiotic_5fclasses_2eproto();
  return *default_instance_;
}

Abbreviation* Abbreviation::default_instance_ = NULL;

Abbreviation* Abbreviation::New() const {
  return new Abbreviation;
}

void Abbreviation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_morphosyntactic_features()) {
      if (morphosyntactic_features_ != &::google::protobuf::internal::kEmptyString) {
        morphosyntactic_features_->clear();
      }
    }
    if (has_code_switch()) {
      if (code_switch_ != &::google::protobuf::internal::kEmptyString) {
        code_switch_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Abbreviation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_morphosyntactic_features;
        break;
      }

      // optional string morphosyntactic_features = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphosyntactic_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_code_switch;
        break;
      }

      // optional string code_switch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code_switch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code_switch().data(), this->code_switch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Abbreviation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // optional string morphosyntactic_features = 2;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->morphosyntactic_features(), output);
  }

  // optional string code_switch = 3;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->code_switch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Abbreviation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional string morphosyntactic_features = 2;
  if (has_morphosyntactic_features()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->morphosyntactic_features().data(), this->morphosyntactic_features().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->morphosyntactic_features(), target);
  }

  // optional string code_switch = 3;
  if (has_code_switch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code_switch().data(), this->code_switch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code_switch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Abbreviation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string morphosyntactic_features = 2;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional string code_switch = 3;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Abbreviation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Abbreviation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Abbreviation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Abbreviation::MergeFrom(const Abbreviation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_morphosyntactic_features()) {
      set_morphosyntactic_features(from.morphosyntactic_features());
    }
    if (from.has_code_switch()) {
      set_code_switch(from.code_switch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Abbreviation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Abbreviation::CopyFrom(const Abbreviation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Abbreviation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Abbreviation::Swap(Abbreviation* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(morphosyntactic_features_, other->morphosyntactic_features_);
    std::swap(code_switch_, other->code_switch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Abbreviation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Abbreviation_descriptor_;
  metadata.reflection = Abbreviation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sparrowhawk
}  // namespace speech

// @@protoc_insertion_point(global_scope)
